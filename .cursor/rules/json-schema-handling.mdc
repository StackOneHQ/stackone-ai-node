---
description: Standards for working with JSON Schema types in the repository.
globs: *.ts
alwaysApply: false
---
# JSON Schema Handling

Standards for working with JSON Schema types in the repository.

<rule>
name: json_schema_handling
description: Standards for properly handling JSON Schema types to avoid type errors

filters:
  - type: path
    pattern: "^src/.*\\.ts$"

actions:
  - type: suggest
    message: |
      When working with JSON Schema types, follow these guidelines to avoid type errors:

      1. Understanding JSONSchema7Definition type:
         - `JSONSchema7Definition` is a union type that can be either a `JSONSchema7` object or a boolean
         - It does NOT accept `undefined` as a valid value
         - Setting a property to `undefined` will cause a type error

      2. Handling the conflict between TypeScript types and linter rules:
         - The TypeScript type system doesn't allow setting a `JSONSchema7Definition` property to `undefined`
         - However, linters like Biome may prefer using `undefined` assignment over the `delete` operator for performance
         - To satisfy both, use one of these approaches:

      3. Recommended approaches for removing JSON Schema properties:
         - Use type assertion when setting to undefined: `obj.properties['prop'] = undefined as unknown as JSONSchema7Definition`
         - Create a new object without the property using destructuring: `const { propToRemove, ...rest } = obj.properties`
         - Use a helper function that handles the type casting internally
         - For complex objects, consider using a deep clone and filter approach

      4. When modifying schema objects:
         - Create a new object with spread syntax rather than modifying in place when possible
         - Use proper type guards to ensure type safety
         - Consider using a deep clone for complex nested schemas to avoid reference issues
         - Always check if a property exists before attempting to modify it

examples:
  - input: |
      // Problematic: Type error with undefined, linter warning with delete
      function removeSchemaProperty(schema: { properties: Record<string, JSONSchema7Definition> }): void {
        // TypeScript error: Type 'undefined' is not assignable to type 'JSONSchema7Definition'
        schema.properties['propertyToRemove'] = undefined;
        
        // Linter warning: Avoid the delete operator which can impact performance
        delete schema.properties['propertyToRemove'];
      }
    output: |
      // Solution 1: Type assertion to satisfy TypeScript
      function removeSchemaProperty(schema: { properties: Record<string, JSONSchema7Definition> }): void {
        // Use type assertion to satisfy TypeScript while using undefined (preferred by linters)
        schema.properties['propertyToRemove'] = undefined as unknown as JSONSchema7Definition;
      }
      
      // Solution 2: Create a new object without the property
      function removeSchemaProperty(schema: { properties: Record<string, JSONSchema7Definition> }): { properties: Record<string, JSONSchema7Definition> } {
        const { propertyToRemove, ...rest } = schema.properties;
        return { ...schema, properties: rest };
      }
      
      // Solution 3: Helper function approach
      function removeJsonSchemaProperty<T>(obj: Record<string, T>, key: string): void {
        // This function encapsulates the type assertion
        obj[key] = undefined as unknown as T;
      }
      
      function removeSchemaProperty(schema: { properties: Record<string, JSONSchema7Definition> }): void {
        removeJsonSchemaProperty(schema.properties, 'propertyToRemove');
      }

  - input: |
      // Incorrect: Not checking if properties exist
      function processSchema(schema: JSONSchema7): void {
        const requiredProps = schema.required;
        requiredProps.forEach(prop => {
          schema.properties[prop].description = 'This property is required';
        });
      }
    output: |
      // Correct: Checking if properties exist
      function processSchema(schema: JSONSchema7): void {
        if (!schema.required || !schema.properties) {
          return;
        }
        
        schema.required.forEach(prop => {
          if (schema.properties && prop in schema.properties) {
            const propSchema = schema.properties[prop];
            if (typeof propSchema === 'object' && propSchema !== null) {
              propSchema.description = 'This property is required';
            }
          }
        });
      }

metadata:
  priority: high
  version: 1.0
  tags:
    - json-schema
    - typescript
    - type-safety
</rule> 