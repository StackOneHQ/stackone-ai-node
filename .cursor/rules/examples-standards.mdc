---
description: Standards for creating and maintaining examples in the StackOne repository
globs: examples/*
alwaysApply: false
---
# Examples Standards

Standards for creating and maintaining examples in the StackOne repository.

<rule>
name: examples_standards
description: Standards for creating and maintaining examples for all functionality

filters:
  - type: path
    pattern: "^examples/.*"

actions:
  - type: suggest
    message: |
      When working with examples:

      1. Location Requirements:
         ```
         examples/
         ├── basic_usage/
         │   ├── basic_tool_usage.ts      # Basic usage examples
         │   └── error_handling.ts        # Error handling examples
         ├── integrations/                # Integration examples
         │   ├── openai_integration.ts
         │   └── other_integration.ts
         └── README.md                    # Examples documentation
         ```

      2. Example Requirements:
         - Every public function/class needs at least one example
         - Examples should be runnable TypeScript scripts
         - Use Node's assert module for validation instead of console.logs
         - Include proper error handling with try/catch blocks
         - Include TypeScript return types for all functions
         - Follow the same code style as the main codebase
         - Exit with non-zero code on error using process.exit(1)

      3. Documentation:
         - Each example file should start with a docstring explaining its purpose
         - Use assertions to validate expected behavior
         - Document any prerequisites (environment variables, etc)

      4. Testing:
         - Examples should be tested as part of CI
         - Examples should work with the latest package version
         - Use assertions to verify expected behavior

examples:
  - input: |
      /**
       * Example showing basic usage of StackOneToolSet.
       */
      
      import assert from 'node:assert';
      import { StackOneToolSet } from '../src';
      
      const exampleFunction = async (): Promise<void> => {
        // Initialize the toolset
        const toolset = new StackOneToolSet();
        
        // Get tools and verify
        const tools = toolset.getTools('hris_*');
        assert(tools.length > 0, 'Expected to find HRIS tools');
        
        // Use a specific tool
        const employeeTool = tools.getTool('hris_list_employees');
        assert(employeeTool !== undefined, 'Expected to find tool');
        
        // Execute and verify result
        const result = await employeeTool.execute();
        assert(Array.isArray(result), 'Expected result to be an array');
      };
      
      // Run the example
      exampleFunction().catch((error) => {
        console.error('Error:', error);
        process.exit(1);
      });
    output: "Correctly structured example"

  - input: |
      // Bad example - missing assertions, error handling, types
      import { StackOneToolSet } from '../src';
      
      const badExample = async () => {
        const toolset = new StackOneToolSet();
        const tools = toolset.getTools("hris_*");
        const tool = tools.getTool("hris_list_employees");
        
        if (tool) {
          const result = await tool.execute();
          console.log(result);
        }
      };
      
      badExample();
    output: "Incorrectly structured example"

metadata:
  priority: high
  version: 1.0
  tags:
    - examples
    - documentation
    - testing
</rule> 