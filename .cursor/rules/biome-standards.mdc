---
description: Standards for using Biome for linting and formatting in the repository
globs: *.{ts,js,tsx,jsx}"
alwaysApply: false
---
---
description: Standards for using Biome for linting and formatting in the repository
globs: "*.{ts,js,tsx,jsx}"
---
# Biome Standards

Standards for using Biome for linting and formatting in the StackOne repository.

<rule>
name: biome_standards
description: Standards for using Biome for linting and formatting
filters:
  # Match TypeScript and JavaScript files
  - type: file_extension
    pattern: "\\.(ts|js|tsx|jsx)$"

actions:
  - type: suggest
    message: |
      ## Biome Linting and Formatting Standards

      ### Running Biome Commands
      
      1. **Linting**: Check code for issues without applying fixes
         ```bash
         bun run lint
         # or
         biome check .
         ```
      
      2. **Formatting**: Format code without checking for issues
         ```bash
         bun run format
         # or
         biome format --write .
         ```
      
      3. **Check and Fix**: Check code and apply automatic fixes
         ```bash
         bun run check
         # or
         biome check --apply .
         ```

      ### Pre-commit Hooks
      
      - Biome is configured with Husky to run automatically on staged files before commits
      - To bypass in exceptional cases: `git commit --no-verify`

      ### Configuration
      
      - Configuration is in `biome.json` at the project root
      - Do not modify this file without team discussion
      - Key settings:
        - Indent: 2 spaces
        - Line width: 100 characters
        - Quote style: Single quotes
        - Trailing commas: ES5 style
        - Semicolons: Always required

      ### Best Practices
      
      1. Run Biome before submitting PRs
      2. Fix all errors (warnings can be addressed later)
      3. Don't disable rules without team discussion
      4. Use TypeScript with proper types to avoid many linting issues
      5. For arrow functions, always include return types
      6. Use Bun for all package management and script running

examples:
  - input: |
      // Bad: Missing semicolon, double quotes, no return type
      const add = (a: number, b: number) => a + b
      console.log("Result:", add(1, 2))
      
      // Good: With semicolon, single quotes, return type
      const add = (a: number, b: number): number => a + b;
      console.log('Result:', add(1, 2));
    output: "Code formatted according to Biome standards"

metadata:
  priority: high
  version: 1.0
</rule>