---
description: Standards for using Bun in this repository
globs: 
alwaysApply: false
---

# Bun Standards

## Overview

This repository uses [Bun](mdc:https:/bun.sh) as the JavaScript runtime and package manager. Bun is a fast all-in-one JavaScript runtime that can replace Node.js, npm, yarn, and webpack.

## Package Management

- Use `bun install` instead of `npm install` to add dependencies
- Use `bun.lockb` for lockfiles (automatically generated)
- When adding new dependencies, specify exact versions: `bun add package@x.y.z`

## TypeScript Configuration

- Bun has built-in TypeScript support, no need for separate transpilation
- When working with TypeScript files, be aware that Bun's type definitions may conflict with Node.js types
- Use `/// <reference types="bun-types" />` at the top of files that use Bun-specific APIs

## Running Scripts

- Use `bun run` to execute scripts defined in package.json
- For direct execution of TypeScript files, use `bun file.ts` instead of `ts-node file.ts`

## Testing

- Use Bun's built-in test runner with `bun test`
- Test files should follow the pattern `*.test.ts` or `*.spec.ts`

## Environment Variables

- Bun automatically loads `.env` files
- Access environment variables via `Bun.env` or `process.env`

## Type Compatibility

- When encountering type conflicts between Bun and other libraries:
  - Use type assertions carefully
  - Consider using `as any` only when necessary
  - Prefer creating proper type interfaces when possible

## Deployment

- For production deployments, use `bun build` to create optimized bundles
