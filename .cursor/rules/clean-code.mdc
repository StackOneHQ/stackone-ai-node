---
description: Standards for maintaining clean, readable, and maintainable code in the repository.
globs: src/**/*.ts
alwaysApply: false
---
# Clean Code Standards

Standards for maintaining clean, readable, and maintainable code in the repository.

<rule>
name: remove_unused_code
description: Always remove unused code after refactoring to maintain a clean codebase

filters:
  - type: path
    pattern: "^src/.*\\.ts$"

actions:
  - type: suggest
    message: |
      After refactoring, always remove unused code to maintain a clean and maintainable codebase:

      1. Remove unused:
         - Variables, parameters, and function arguments
         - Functions, methods, and classes
         - Imports and exports
         - Properties in interfaces and types
         - Commented-out code blocks

      2. Benefits of removing unused code:
         - Reduces cognitive load when reading code
         - Prevents confusion about which code paths are actually used
         - Improves maintainability by reducing the surface area of the codebase
         - Makes the codebase easier to understand for new contributors
         - Prevents "dead" code from being accidentally reactivated

      3. Tools to help identify unused code:
         - TypeScript compiler with `noUnusedLocals` and `noUnusedParameters` flags
         - ESLint with rules like `no-unused-vars` and `no-dead-code`
         - IDE features that gray out unused code
         - Code coverage tools to identify untested (potentially unused) code paths

      4. When refactoring:
         - Don't comment out old code - delete it (git history preserves it)
         - Remove any code paths that are no longer reachable
         - Delete any functions that are no longer called
         - Remove any parameters that are no longer used
         - Clean up imports that are no longer needed

examples:
  - input: |
      import { parseJson, formatJson, validateJson } from './utils';
      
      function processData(data: string, options: { validate: boolean }): object {
        // Old implementation
        // const parsed = JSON.parse(data);
        // return parsed;
        
        const parsed = parseJson(data);
        
        // We might need validation later
        // if (options.validate) {
        //   validateJson(parsed);
        // }
        
        return parsed;
      }
    output: |
      import { parseJson } from './utils';
      
      function processData(data: string): object {
        const parsed = parseJson(data);
        return parsed;
      }

  - input: |
      class DataProcessor {
        private cache: Map<string, any> = new Map();
        private logger: Logger;
        private config: Config;
        
        constructor(logger: Logger, config: Config) {
          this.logger = logger;
          this.config = config;
        }
        
        process(data: string): object {
          const result = JSON.parse(data);
          return result;
        }
        
        // Old method, no longer used after refactoring
        // cacheResult(key: string, data: any): void {
        //   this.cache.set(key, data);
        //   this.logger.debug(`Cached data for key: ${key}`);
        // }
      }
    output: |
      class DataProcessor {
        private logger: Logger;
        
        constructor(logger: Logger) {
          this.logger = logger;
        }
        
        process(data: string): object {
          const result = JSON.parse(data);
          return result;
        }
      }

metadata:
  priority: high
  version: 1.0
  tags:
    - clean-code
    - refactoring
    - best-practices
</rule> 