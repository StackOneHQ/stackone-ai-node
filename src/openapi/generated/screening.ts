// Generated OpenAPI specification for screening
// DO NOT EDIT THIS FILE DIRECTLY
export const screeningSpec = {
  openapi: '3.1.0',
  paths: {
    '/unified/screening/packages': {
      get: {
        operationId: 'screening_list_screening_packages',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,name,description',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of screening packages was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ScreeningPackagesPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Screening Packages',
        tags: ['Packages'],
        'x-speakeasy-group': 'screening',
        'x-speakeasy-name-override': 'list_screening_packages',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/screening/packages/{id}': {
      get: {
        operationId: 'screening_get_screening_package',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,name,description',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The screening package with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ScreeningPackageResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Screening Package',
        tags: ['Packages'],
        'x-speakeasy-group': 'screening',
        'x-speakeasy-name-override': 'get_screening_package',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/screening/results/webhook': {
      post: {
        operationId: 'screening_webhook_screening_result',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ScreeningResultWebhook',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'The screening result webhook was processed.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ScreeningResultWebhook',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Webhook Screening Result',
        tags: ['Results'],
        'x-speakeasy-group': 'screening',
        'x-speakeasy-name-override': 'webhook_screening_result',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/screening/orders': {
      post: {
        operationId: 'screening_create_screening_order',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/ScreeningCreateOrderRequestDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'The screening order was created.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CreateResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Create Screening Order',
        tags: ['Orders'],
        'x-speakeasy-group': 'screening',
        'x-speakeasy-name-override': 'create_screening_order',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
  },
  info: {
    title: 'Screening',
    description: 'The documentation for the StackOne Unified API - SCREENING',
    version: '1.0.0',
    contact: {},
  },
  tags: [
    {
      name: 'Orders',
      description: 'Requests for screening services.',
    },
    {
      name: 'Results',
      description: 'Outcomes of screening services.',
    },
    {
      name: 'Packages',
      description: 'Collections of screening services.',
    },
  ],
  servers: [
    {
      url: 'https://api.stackone.com',
    },
  ],
  components: {
    securitySchemes: {
      basic: {
        type: 'http',
        scheme: 'basic',
      },
    },
    schemas: {
      BadGatewayResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 502,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Gateway',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      BadRequestResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
          data: {
            description: 'Error details',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/UnifiedError',
              },
            ],
          },
          provider_errors: {
            description: 'List of provider-specific errors',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/ProviderError',
            },
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ConflictResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 409,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Conflict',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      CreateResult: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            example: 201,
          },
          message: {
            type: 'string',
            example: 'Record created successfully.',
          },
          timestamp: {
            type: 'string',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
          },
          data: {
            $ref: '#/components/schemas/CreateResultDataApiModel',
          },
        },
        required: ['statusCode', 'message', 'timestamp', 'data'],
      },
      CreateResultDataApiModel: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
        },
      },
      ForbiddenResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 403,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Forbidden resource',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      InternalServerErrorResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 500,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Internal server error',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      NotFoundResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 404,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Found',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      NotImplementedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 501,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Implemented',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      PreconditionFailedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 412,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Precondition failed',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ProviderError: {
        type: 'object',
        properties: {
          status: {
            type: 'number',
            description: 'HTTP status code of the provider error',
            example: 400,
            nullable: true,
          },
          url: {
            type: 'string',
            description: 'URL that caused the error',
            example: 'https://api.provider.com/v1/resource',
            nullable: true,
          },
          raw: {
            type: 'object',
            description: 'Raw error response from the provider',
            example: {
              message: 'Invalid input parameters',
            },
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      RawResponse: {
        type: 'object',
        properties: {
          method: {
            type: 'string',
          },
          url: {
            type: 'string',
          },
          body: {
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {
                  type: 'integer',
                  format: 'int32',
                  minimum: 0,
                  maximum: 255,
                },
              },
            ],
            additionalProperties: true,
            nullable: true,
          },
          response: {
            oneOf: [
              {
                type: 'object',
                additionalProperties: true,
              },
              {
                type: 'array',
                items: {},
              },
              {
                type: 'string',
              },
            ],
            nullable: true,
          },
        },
        required: ['method', 'url'],
      },
      RequestTimedOutResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 408,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Request timed out',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ScreeningCreateOrderRequestDto: {
        type: 'object',
        properties: {
          passthrough: {
            type: 'object',
            description: 'Value to pass through to the provider',
            example: {
              other_known_names: 'John Doe',
            },
            additionalProperties: true,
            nullable: true,
          },
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          package_id: {
            type: 'string',
            description: 'Package ID',
            example: '54321',
          },
          candidate: {
            description: 'Candidate information',
            allOf: [
              {
                $ref: '#/components/schemas/ScreeningOrderCandidate',
              },
            ],
          },
        },
        required: ['package_id', 'candidate'],
      },
      ScreeningOrderCandidate: {
        type: 'object',
        properties: {
          first_name: {
            type: 'string',
            description: 'Candidate first name',
            example: 'John',
            nullable: true,
          },
          last_name: {
            type: 'string',
            description: 'Candidate last name',
            example: 'Doe',
            nullable: true,
          },
          email: {
            type: 'string',
            description: 'Candidate email',
            example: 'john.doe@example.com',
            nullable: true,
          },
        },
      },
      ScreeningPackage: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The name of the screening package',
            example: 'Basic Background Check',
          },
          description: {
            type: 'string',
            description: 'The description of the screening package',
            example: 'Basic background check including identity verification and criminal records',
            nullable: true,
          },
        },
        required: ['name'],
      },
      ScreeningPackageResult: {
        type: 'object',
        properties: {
          data: {
            $ref: '#/components/schemas/ScreeningPackage',
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
        required: ['data'],
      },
      ScreeningPackagesPaginated: {
        type: 'object',
        properties: {
          next_page: {
            type: 'string',
            deprecated: true,
            nullable: true,
          },
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            type: 'array',
            items: {
              $ref: '#/components/schemas/ScreeningPackage',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
        required: ['data'],
      },
      ScreeningResult: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          order_id: {
            type: 'string',
            description: 'Order ID associated with this result',
            example: '12345',
            nullable: true,
          },
          score: {
            description: 'Score information',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/ScreeningResultScore',
              },
            ],
          },
          start_date: {
            type: 'string',
            description: 'Start date of the screening',
            example: '2023-01-01T00:00:00Z',
            format: 'date-time',
            nullable: true,
          },
          submission_date: {
            type: 'string',
            description: 'Submission date of the screening',
            example: '2023-01-02T00:00:00Z',
            format: 'date-time',
            nullable: true,
          },
          summary: {
            type: 'string',
            description: 'Summary of the screening result',
            example: 'Background check completed successfully',
            nullable: true,
          },
          status: {
            type: 'string',
            description: 'Result status',
            example: 'completed',
            enum: [
              'pending',
              'in_progress',
              'completed',
              'failed',
              'cancelled',
              'unmapped_value',
              null,
            ],
            'x-speakeasy-unknown-values': 'allow',
            nullable: true,
          },
          result_url: {
            type: 'string',
            description: 'URL to view the detailed result',
            example: 'https://example.com/results/12345',
            nullable: true,
          },
        },
      },
      ScreeningResultScore: {
        type: 'object',
        properties: {
          label: {
            type: 'string',
            description: 'Score label',
            example: 'Overall Risk',
            nullable: true,
          },
          value: {
            type: 'string',
            description: 'Score value',
            example: '75',
            nullable: true,
          },
          min: {
            type: 'string',
            description: 'Minimum score value',
            example: '0',
            nullable: true,
          },
          max: {
            type: 'string',
            description: 'Maximum score value',
            example: '100',
            nullable: true,
          },
        },
      },
      ScreeningResultWebhook: {
        type: 'object',
        properties: {
          event: {
            type: 'string',
            description: 'The event type',
            example: 'screening.result.completed',
            enum: [
              'screening.results.created',
              'screening.results.updated',
              'screening.results.completed',
              'screening.results.failed',
              'screening.results.cancelled',
            ],
            'x-speakeasy-unknown-values': 'allow',
          },
          data: {
            description: 'The result data',
            allOf: [
              {
                $ref: '#/components/schemas/ScreeningResult',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
        required: ['event', 'data'],
      },
      TooManyRequestsResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 429,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Too many requests',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnauthorizedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 401,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unauthorized',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnifiedError: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
            nullable: true,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      UnprocessableEntityResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 422,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unprocessable Entity',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
    },
  },
};
