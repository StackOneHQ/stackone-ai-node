// Generated OpenAPI specification for ticketing
// DO NOT EDIT THIS FILE DIRECTLY
export const ticketingSpec = {
  openapi: '3.1.0',
  paths: {
    '/unified/ticketing/tickets': {
      get: {
        description: 'Retrieve a paginated list of tickets.',
        operationId: 'ticketing_list_tickets',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of tickets was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Tickets',
        tags: ['Tickets'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_tickets',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
      post: {
        description: 'Create a new ticket record.',
        operationId: 'ticketing_create_ticket',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TicketingTicketCreateRequestDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'Record created successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CreateResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Create Ticket',
        tags: ['Tickets'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'create_ticket',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}': {
      get: {
        description: 'Retrieve a single ticket by its identifier.',
        operationId: 'ticketing_get_ticket',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,projects,components,organization,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The ticket with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Ticket',
        tags: ['Tickets'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_ticket',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
      patch: {
        description: 'Update an existing ticket record by its identifier.',
        operationId: 'ticketing_update_ticket',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/TicketingTicketUpdateRequestDto',
              },
            },
          },
        },
        responses: {
          '200': {
            description: 'Record updated successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UpdateResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Update Ticket',
        tags: ['Tickets'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'update_ticket',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/users': {
      get: {
        description: 'Retrieve a paginated list of users.',
        operationId: 'ticketing_list_users',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of users was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingUsersPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Users',
        tags: ['Users'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_users',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/users/{id}': {
      get: {
        description: 'Retrieve a single user by their identifier.',
        operationId: 'ticketing_get_user',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The user with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingUserResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get User',
        tags: ['Users'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_user',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/comments': {
      get: {
        description: 'Retrieve a paginated list of comments for a ticket.',
        operationId: 'ticketing_list_comments',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of comments was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingCommentsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Comments',
        tags: ['Tickets', 'Comments'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_comments',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/comments/{subResourceId}': {
      get: {
        description: 'Retrieve a single comment by its identifier for a ticket.',
        operationId: 'ticketing_get_comment',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subResourceId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The comment with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingCommentResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Comment',
        tags: ['Tickets', 'Comments'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_comment',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/attachments/{subResourceId}/download': {
      get: {
        description: 'Download the attachment file from a ticket.',
        operationId: 'ticketing_download_ticketing_attachment',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subResourceId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'format',
            required: false,
            in: 'query',
            description: 'The format to download the file in',
            schema: {
              nullable: true,
              example: 'base64',
              type: 'string',
            },
          },
          {
            name: 'export_format',
            required: false,
            in: 'query',
            description: 'The export format of the file',
            schema: {
              nullable: true,
              example: 'text/plain',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description:
              'The document related to the application with the given identifiers was retrieved.',
            content: {
              '*/*': {
                schema: {
                  type: 'string',
                  format: 'binary',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Download Attachment',
        tags: ['Tickets', 'Attachments'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'download_ticketing_attachment',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/attachments': {
      get: {
        description: 'Retrieve a paginated list of attachment details for a ticket.',
        operationId: 'ticketing_list_attachments',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of attachments was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingAttachmentsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Attachments',
        tags: ['Tickets', 'Attachments'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_attachments',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/attachments/{subResourceId}': {
      get: {
        description: 'Retrieve the details of a single attachment for a ticket.',
        operationId: 'ticketing_get_attachment',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subResourceId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The attachment with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingAttachmentResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Attachment',
        tags: ['Tickets', 'Attachments'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_attachment',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/ticket_types': {
      get: {
        description: 'Retrieve a paginated list of all ticket types.',
        operationId: 'ticketing_list_ticket_types',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,name,project_id,remote_project_id',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of ticket types was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketTypePaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Ticket Types',
        tags: ['Ticket Types'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_ticket_types',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/ticket_types/{id}': {
      get: {
        description: 'Retrieve a single ticket type by its identifier.',
        operationId: 'ticketing_get_ticket_type',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,name,project_id,remote_project_id',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The ticket type with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketTypeResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Ticket Type',
        tags: ['Ticket Types'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_ticket_type',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/projects': {
      get: {
        description: 'Retrieve a paginated list of projects.',
        operationId: 'ticketing_list_projects',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of projects was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingProjectsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Projects',
        tags: ['Projects'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_projects',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/projects/{id}': {
      get: {
        description: 'Retrieve a single project by its identifier.',
        operationId: 'ticketing_get_project',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,organization_id,remote_organization_id,name,description,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The project with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingProjectResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Project',
        tags: ['Projects'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_project',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/projects/{id}/components': {
      get: {
        description: 'Retrieve a paginated list of project components.',
        operationId: 'ticketing_list_project_components',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of project components was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingComponentsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Project Components',
        tags: ['Projects', 'Components'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_project_components',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/projects/{id}/components/{subResourceId}': {
      get: {
        description: 'Retrieve a single project component by its identifier.',
        operationId: 'ticketing_get_project_component',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subResourceId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,organization_id,remote_organization_id,project_id,remote_project_id,name,description,created_at,updated_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The project component with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingComponentResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Project Component',
        tags: ['Projects', 'Components'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'get_project_component',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/projects/{id}/ticket_types': {
      get: {
        description: 'Retrieve a paginated list of ticket types for a project.',
        operationId: 'ticketing_list_project_ticket_types',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,name,project_id,remote_project_id',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of project ticket types was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketTypePaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Project Ticket Types',
        tags: ['Projects', 'Ticket Types'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_project_ticket_types',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/ticketing/tickets/{id}/statuses': {
      get: {
        description: 'Retrieve a paginated list of statuses for a ticket.',
        operationId: 'ticketing_list_ticket_statuses',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields to return in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  format: 'date-time',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              format: 'date-time',
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of ticket statuses was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TicketingTicketStatusesPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Ticket Statuses',
        tags: ['Tickets', 'Ticket Statuses'],
        'x-speakeasy-group': 'ticketing',
        'x-speakeasy-name-override': 'list_ticket_statuses',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
  },
  info: {
    title: 'Ticketing',
    description: 'The documentation for the StackOne Unified API - TICKETING',
    version: '1.0.0',
    contact: {},
  },
  tags: [
    {
      name: 'Tickets',
      description: 'Requests for support, assistance, or resolution.',
    },
    {
      name: 'Users',
      description: 'Accounts that can create or work on tickets.',
    },
    {
      name: 'Comments',
      description: 'Notes or messages added to tickets.',
    },
    {
      name: 'Attachments',
      description: 'Files attached to tickets.',
    },
    {
      name: 'Ticket Types',
      description: 'Types or categories of tickets.',
    },
    {
      name: 'Collections',
      description: 'Groupings in which related tickets can be classified under.',
    },
    {
      name: 'Projects',
      description: 'The top level grouping of tickets.',
    },
    {
      name: 'Components',
      description:
        'A sub grouping under projects in which related tickets can be classified together.',
    },
    {
      name: 'Ticket Statuses',
      description: 'Statuses representing ticket progress.',
    },
  ],
  servers: [
    {
      url: 'https://api.stackone.com',
    },
  ],
  components: {
    securitySchemes: {
      basic: {
        type: 'http',
        scheme: 'basic',
      },
    },
    schemas: {
      BadGatewayResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 502,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Gateway',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      BadRequestResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
          data: {
            description: 'Error details',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/UnifiedError',
              },
            ],
          },
          provider_errors: {
            description: 'List of provider-specific errors',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/ProviderError',
            },
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ConflictResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 409,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Conflict',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      CreateResult: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            example: 201,
          },
          message: {
            type: 'string',
            example: 'Record created successfully.',
          },
          timestamp: {
            type: 'string',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
          },
          data: {
            $ref: '#/components/schemas/CreateResultDataApiModel',
          },
        },
        required: ['statusCode', 'message', 'timestamp', 'data'],
      },
      CreateResultDataApiModel: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
        },
      },
      FileFormatEnum: {
        type: 'object',
        properties: {
          value: {
            type: 'string',
            description: 'The file format of the file, expressed as a file extension',
            enum: [
              'unmapped_value',
              'ez',
              'aw',
              'atom',
              'atomcat',
              'atomdeleted',
              'atomsvc',
              'dwd',
              'held',
              'rsat',
              'bdoc',
              'xcs',
              'ccxml',
              'cdfx',
              'cdmia',
              'cdmic',
              'cdmid',
              'cdmio',
              'cdmiq',
              'cu',
              'mpd',
              'davmount',
              'dbk',
              'dssc',
              'xdssc',
              'es',
              'ecma',
              'emma',
              'emotionml',
              'epub',
              'exi',
              'exp',
              'fdt',
              'pfr',
              'geojson',
              'gml',
              'gpx',
              'gxf',
              'gz',
              'hjson',
              'stk',
              'ink',
              'inkml',
              'ipfix',
              'its',
              'jar',
              'war',
              'ear',
              'ser',
              'class',
              'js',
              'mjs',
              'json',
              'map',
              'json5',
              'jsonml',
              'jsonld',
              'lgr',
              'lostxml',
              'hqx',
              'cpt',
              'mads',
              'webmanifest',
              'mrc',
              'mrcx',
              'ma',
              'nb',
              'mb',
              'mathml',
              'mbox',
              'mscml',
              'metalink',
              'meta4',
              'mets',
              'maei',
              'musd',
              'mods',
              'm21',
              'mp21',
              'mp4s',
              'm4p',
              'doc',
              'dot',
              'mxf',
              'nq',
              'nt',
              'cjs',
              'bin',
              'dms',
              'lrf',
              'mar',
              'so',
              'dist',
              'distz',
              'pkg',
              'bpk',
              'dump',
              'elc',
              'deploy',
              'exe',
              'dll',
              'deb',
              'dmg',
              'iso',
              'img',
              'msi',
              'msp',
              'msm',
              'buffer',
              'oda',
              'opf',
              'ogx',
              'omdoc',
              'onetoc',
              'onetoc2',
              'onetmp',
              'onepkg',
              'oxps',
              'relo',
              'xer',
              'pdf',
              'pgp',
              'asc',
              'sig',
              'prf',
              'p10',
              'p7m',
              'p7c',
              'p7s',
              'p8',
              'ac',
              'cer',
              'crl',
              'pkipath',
              'pki',
              'pls',
              'ai',
              'eps',
              'ps',
              'provx',
              'pskcxml',
              'raml',
              'rdf',
              'owl',
              'rif',
              'rnc',
              'rl',
              'rld',
              'rs',
              'rapd',
              'sls',
              'rusd',
              'gbr',
              'mft',
              'roa',
              'rsd',
              'rss',
              'rtf',
              'sbml',
              'scq',
              'scs',
              'spq',
              'spp',
              'sdp',
              'senmlx',
              'sensmlx',
              'setpay',
              'setreg',
              'shf',
              'siv',
              'sieve',
              'smi',
              'smil',
              'rq',
              'srx',
              'gram',
              'grxml',
              'sru',
              'ssdl',
              'ssml',
              'swidtag',
              'tei',
              'teicorpus',
              'tfi',
              'tsd',
              'toml',
              'trig',
              'ttml',
              'ubj',
              'rsheet',
              'td',
              'vxml',
              'wasm',
              'wgt',
              'hlp',
              'wsdl',
              'wspolicy',
              'xaml',
              'xav',
              'xca',
              'xdf',
              'xel',
              'xns',
              'xenc',
              'xhtml',
              'xht',
              'xlf',
              'xml',
              'xsl',
              'xsd',
              'rng',
              'dtd',
              'xop',
              'xpl',
              '*xsl',
              'xslt',
              'xspf',
              'mxml',
              'xhvml',
              'xvml',
              'xvm',
              'yang',
              'yin',
              'zip',
              '*3gpp',
              'adp',
              'amr',
              'au',
              'snd',
              'mid',
              'midi',
              'kar',
              'rmi',
              'mxmf',
              '*mp3',
              'm4a',
              'mp4a',
              'mpga',
              'mp2',
              'mp2a',
              'mp3',
              'm2a',
              'm3a',
              'oga',
              'ogg',
              'spx',
              'opus',
              's3m',
              'sil',
              'wav',
              '*wav',
              'weba',
              'xm',
              'ttc',
              'otf',
              'ttf',
              'woff',
              'woff2',
              'exr',
              'apng',
              'avif',
              'bmp',
              'cgm',
              'drle',
              'emf',
              'fits',
              'g3',
              'gif',
              'heic',
              'heics',
              'heif',
              'heifs',
              'hej2',
              'hsj2',
              'ief',
              'jls',
              'jp2',
              'jpg2',
              'jpeg',
              'jpg',
              'jpe',
              'jph',
              'jhc',
              'jpm',
              'jpx',
              'jpf',
              'jxr',
              'jxra',
              'jxrs',
              'jxs',
              'jxsc',
              'jxsi',
              'jxss',
              'ktx',
              'ktx2',
              'png',
              'sgi',
              'svg',
              'svgz',
              't38',
              'tif',
              'tiff',
              'tfx',
              'webp',
              'wmf',
              'disposition-notification',
              'u8msg',
              'u8dsn',
              'u8mdn',
              'u8hdr',
              'eml',
              'mime',
              '3mf',
              'gltf',
              'glb',
              'igs',
              'iges',
              'msh',
              'mesh',
              'silo',
              'mtl',
              'obj',
              'stpx',
              'stpz',
              'stpxz',
              'stl',
              'wrl',
              'vrml',
              '*x3db',
              'x3dbz',
              'x3db',
              '*x3dv',
              'x3dvz',
              'x3d',
              'x3dz',
              'x3dv',
              'appcache',
              'manifest',
              'ics',
              'ifb',
              'coffee',
              'litcoffee',
              'css',
              'csv',
              'html',
              'htm',
              'shtml',
              'jade',
              'jsx',
              'less',
              'markdown',
              'md',
              'mml',
              'mdx',
              'n3',
              'txt',
              'text',
              'conf',
              'def',
              'list',
              'log',
              'in',
              'ini',
              'rtx',
              '*rtf',
              'sgml',
              'sgm',
              'shex',
              'slim',
              'slm',
              'spdx',
              'stylus',
              'styl',
              'tsv',
              't',
              'tr',
              'roff',
              'man',
              'me',
              'ms',
              'ttl',
              'uri',
              'uris',
              'urls',
              'vcard',
              'vtt',
              '*xml',
              'yaml',
              'yml',
              '3gp',
              '3gpp',
              '3g2',
              'h261',
              'h263',
              'h264',
              'm4s',
              'jpgv',
              '*jpm',
              'jpgm',
              'mj2',
              'mjp2',
              'ts',
              'mp4',
              'mp4v',
              'mpg4',
              'mpeg',
              'mpg',
              'mpe',
              'm1v',
              'm2v',
              'ogv',
              'qt',
              'mov',
              'webm',
              'cww',
              '1km',
              'plb',
              'psb',
              'pvb',
              'tcap',
              'pwn',
              'aso',
              'imp',
              'acu',
              'atc',
              'acutc',
              'air',
              'fcdt',
              'fxp',
              'fxpl',
              'xdp',
              'xfdf',
              'ahead',
              'azf',
              'azs',
              'azw',
              'acc',
              'ami',
              'apk',
              'cii',
              'fti',
              'atx',
              'mpkg',
              'key',
              'm3u8',
              'numbers',
              'pages',
              'pkpass',
              'swi',
              'iota',
              'aep',
              'bmml',
              'mpm',
              'bmi',
              'rep',
              'cdxml',
              'mmd',
              'cdy',
              'csl',
              'cla',
              'rp9',
              'c4g',
              'c4d',
              'c4f',
              'c4p',
              'c4u',
              'c11amc',
              'c11amz',
              'csp',
              'cdbcmsg',
              'cmc',
              'clkx',
              'clkk',
              'clkp',
              'clkt',
              'clkw',
              'wbs',
              'pml',
              'ppd',
              'car',
              'pcurl',
              'dart',
              'rdz',
              'dbf',
              'uvf',
              'uvvf',
              'uvd',
              'uvvd',
              'uvt',
              'uvvt',
              'uvx',
              'uvvx',
              'uvz',
              'uvvz',
              'fe_launch',
              'dna',
              'mlp',
              'mle',
              'dpg',
              'dfac',
              'kpxx',
              'ait',
              'svc',
              'geo',
              'mag',
              'nml',
              'esf',
              'msf',
              'qam',
              'slt',
              'ssf',
              'es3',
              'et3',
              'ez2',
              'ez3',
              'fdf',
              'mseed',
              'seed',
              'dataless',
              'gph',
              'ftc',
              'fm',
              'frame',
              'maker',
              'book',
              'fnc',
              'ltf',
              'fsc',
              'oas',
              'oa2',
              'oa3',
              'fg5',
              'bh2',
              'ddd',
              'xdw',
              'xbd',
              'fzs',
              'txd',
              'ggb',
              'ggt',
              'gex',
              'gre',
              'gxt',
              'g2w',
              'g3w',
              'gmx',
              'gdoc',
              'gslides',
              'gsheet',
              'kml',
              'kmz',
              'gqf',
              'gqs',
              'gac',
              'ghf',
              'gim',
              'grv',
              'gtm',
              'tpl',
              'vcg',
              'hal',
              'zmm',
              'hbci',
              'les',
              'hpgl',
              'hpid',
              'hps',
              'jlt',
              'pcl',
              'pclxl',
              'sfd-hdstx',
              'mpy',
              'afp',
              'listafp',
              'list3820',
              'irm',
              'sc',
              'icc',
              'icm',
              'igl',
              'ivp',
              'ivu',
              'igm',
              'xpw',
              'xpx',
              'i2g',
              'qbo',
              'qfx',
              'rcprofile',
              'irp',
              'xpr',
              'fcs',
              'jam',
              'rms',
              'jisp',
              'joda',
              'ktz',
              'ktr',
              'karbon',
              'chrt',
              'kfo',
              'flw',
              'kon',
              'kpr',
              'kpt',
              'ksp',
              'kwd',
              'kwt',
              'htke',
              'kia',
              'kne',
              'knp',
              'skp',
              'skd',
              'skt',
              'skm',
              'sse',
              'lasxml',
              'lbd',
              'lbe',
              'apr',
              'pre',
              'nsf',
              'org',
              'scm',
              'lwp',
              'portpkg',
              'mvt',
              'mcd',
              'mc1',
              'cdkey',
              'mwf',
              'mfm',
              'flo',
              'igx',
              'mif',
              'daf',
              'dis',
              'mbk',
              'mqy',
              'msl',
              'plc',
              'txf',
              'mpn',
              'mpc',
              'xul',
              'cil',
              'cab',
              'xls',
              'xlm',
              'xla',
              'xlc',
              'xlt',
              'xlw',
              'xlam',
              'xlsb',
              'xlsm',
              'xltm',
              'eot',
              'chm',
              'ims',
              'lrm',
              'thmx',
              'msg',
              'cat',
              '*stl',
              'ppt',
              'pps',
              'pot',
              'ppam',
              'pptm',
              'sldm',
              'ppsm',
              'potm',
              'mpp',
              'mpt',
              'docm',
              'dotm',
              'wps',
              'wks',
              'wcm',
              'wdb',
              'wpl',
              'xps',
              'mseq',
              'mus',
              'msty',
              'taglet',
              'nlu',
              'ntf',
              'nitf',
              'nnd',
              'nns',
              'nnw',
              '*ac',
              'ngdat',
              'n-gage',
              'rpst',
              'rpss',
              'edm',
              'edx',
              'ext',
              'odc',
              'otc',
              'odb',
              'odf',
              'odft',
              'odg',
              'otg',
              'odi',
              'oti',
              'odp',
              'otp',
              'ods',
              'ots',
              'odt',
              'odm',
              'ott',
              'oth',
              'xo',
              'dd2',
              'obgx',
              'oxt',
              'osm',
              'pptx',
              'sldx',
              'ppsx',
              'potx',
              'xlsx',
              'xltx',
              'docx',
              'dotx',
              'mgp',
              'dp',
              'esa',
              'pdb',
              'pqa',
              'oprc',
              'paw',
              'str',
              'ei6',
              'efif',
              'wg',
              'plf',
              'pbd',
              'box',
              'mgz',
              'qps',
              'ptid',
              'qxd',
              'qxt',
              'qwd',
              'qwt',
              'qxl',
              'qxb',
              'rar',
              'bed',
              'mxl',
              'musicxml',
              'cryptonote',
              'cod',
              'rm',
              'rmvb',
              'link66',
              'st',
              'see',
              'sema',
              'semd',
              'semf',
              'ifm',
              'itp',
              'iif',
              'ipk',
              'twd',
              'twds',
              'mmf',
              'teacher',
              'fo',
              'sdkm',
              'sdkd',
              'dxp',
              'sfs',
              'sdc',
              'sda',
              'sdd',
              'smf',
              'sdw',
              'vor',
              'sgl',
              'smzip',
              'sm',
              'wadl',
              'sxc',
              'stc',
              'sxd',
              'std',
              'sxi',
              'sti',
              'sxm',
              'sxw',
              'sxg',
              'stw',
              'sus',
              'susp',
              'svd',
              'sis',
              'sisx',
              'xsm',
              'bdm',
              'xdm',
              'ddf',
              'tao',
              'pcap',
              'cap',
              'dmp',
              'tmo',
              'tpt',
              'mxs',
              'tra',
              'ufd',
              'ufdl',
              'utz',
              'umj',
              'unityweb',
              'uoml',
              'vcx',
              'vsd',
              'vst',
              'vss',
              'vsw',
              'vis',
              'vsf',
              'wbxml',
              'wmlc',
              'wmlsc',
              'wtb',
              'nbp',
              'wpd',
              'wqd',
              'stf',
              'xar',
              'xfdl',
              'hvd',
              'hvs',
              'hvp',
              'osf',
              'osfpvg',
              'saf',
              'spf',
              'cmp',
              'zir',
              'zirz',
              'zaz',
              '7z',
              'abw',
              'ace',
              '*dmg',
              'arj',
              'aab',
              'x32',
              'u32',
              'vox',
              'aam',
              'aas',
              'bcpio',
              '*bdoc',
              'torrent',
              'blb',
              'blorb',
              'bz',
              'bz2',
              'boz',
              'cbr',
              'cba',
              'cbt',
              'cbz',
              'cb7',
              'vcd',
              'cfs',
              'chat',
              'pgn',
              'crx',
              'cco',
              'nsc',
              'cpio',
              'csh',
              '*deb',
              'udeb',
              'dgc',
              'dir',
              'dcr',
              'dxr',
              'cst',
              'cct',
              'cxt',
              'w3d',
              'fgd',
              'swa',
              'wad',
              'ncx',
              'dtb',
              'res',
              'dvi',
              'evy',
              'eva',
              'bdf',
              'gsf',
              'psf',
              'pcf',
              'snf',
              'pfa',
              'pfb',
              'pfm',
              'afm',
              'arc',
              'spl',
              'gca',
              'ulx',
              'gnumeric',
              'gramps',
              'gtar',
              'hdf',
              'php',
              'install',
              '*iso',
              '*key',
              '*numbers',
              '*pages',
              'jardiff',
              'jnlp',
              'kdbx',
              'latex',
              'luac',
              'lzh',
              'lha',
              'run',
              'mie',
              'prc',
              'mobi',
              'application',
              'lnk',
              'wmd',
              'wmz',
              'xbap',
              'mdb',
              'obd',
              'crd',
              'clp',
              '*exe',
              '*dll',
              'com',
              'bat',
              '*msi',
              'mvb',
              'm13',
              'm14',
              '*wmf',
              '*wmz',
              '*emf',
              'emz',
              'mny',
              'pub',
              'scd',
              'trm',
              'wri',
              'nc',
              'cdf',
              'pac',
              'nzb',
              'pl',
              'pm',
              '*prc',
              '*pdb',
              'p12',
              'pfx',
              'p7b',
              'spc',
              'p7r',
              '*rar',
              'rpm',
              'ris',
              'sea',
              'sh',
              'shar',
              'swf',
              'xap',
              'sql',
              'sit',
              'sitx',
              'srt',
              'sv4cpio',
              'sv4crc',
              't3',
              'gam',
              'tar',
              'tcl',
              'tk',
              'tex',
              'tfm',
              'texinfo',
              'texi',
              '*obj',
              'ustar',
              'hdd',
              'ova',
              'ovf',
              'vbox',
              'vbox-extpack',
              'vdi',
              'vhd',
              'vmdk',
              'src',
              'webapp',
              'der',
              'crt',
              'pem',
              'fig',
              '*xlf',
              'xpi',
              'xz',
              'z1',
              'z2',
              'z3',
              'z4',
              'z5',
              'z6',
              'z7',
              'z8',
              'uva',
              'uvva',
              'eol',
              'dra',
              'dts',
              'dtshd',
              'lvp',
              'pya',
              'ecelp4800',
              'ecelp7470',
              'ecelp9600',
              'rip',
              'aac',
              'aif',
              'aiff',
              'aifc',
              'caf',
              'flac',
              '*m4a',
              'mka',
              'm3u',
              'wax',
              'wma',
              'ram',
              'ra',
              'rmp',
              '*ra',
              'cdx',
              'cif',
              'cmdf',
              'cml',
              'csml',
              'xyz',
              'btif',
              'pti',
              'psd',
              'azv',
              'uvi',
              'uvvi',
              'uvg',
              'uvvg',
              'djvu',
              'djv',
              '*sub',
              'dwg',
              'dxf',
              'fbs',
              'fpx',
              'fst',
              'mmr',
              'rlc',
              'ico',
              'dds',
              'mdi',
              'wdp',
              'npx',
              'b16',
              'tap',
              'vtf',
              'wbmp',
              'xif',
              'pcx',
              '3ds',
              'ras',
              'cmx',
              'fh',
              'fhc',
              'fh4',
              'fh5',
              'fh7',
              '*ico',
              'jng',
              'sid',
              '*bmp',
              '*pcx',
              'pic',
              'pct',
              'pnm',
              'pbm',
              'pgm',
              'ppm',
              'rgb',
              'tga',
              'xbm',
              'xpm',
              'xwd',
              'wsc',
              'dae',
              'dwf',
              'gdl',
              'gtw',
              'mts',
              'ogex',
              'x_b',
              'x_t',
              'vds',
              'usdz',
              'bsp',
              'vtu',
              'dsc',
              'curl',
              'dcurl',
              'mcurl',
              'scurl',
              'sub',
              'fly',
              'flx',
              'gv',
              '3dml',
              'spot',
              'jad',
              'wml',
              'wmls',
              's',
              'asm',
              'c',
              'cc',
              'cxx',
              'cpp',
              'h',
              'hh',
              'dic',
              'htc',
              'f',
              'for',
              'f77',
              'f90',
              'hbs',
              'java',
              'lua',
              'mkd',
              'nfo',
              'opml',
              '*org',
              'p',
              'pas',
              'pde',
              'sass',
              'scss',
              'etx',
              'sfv',
              'ymp',
              'uu',
              'vcs',
              'vcf',
              'uvh',
              'uvvh',
              'uvm',
              'uvvm',
              'uvp',
              'uvvp',
              'uvs',
              'uvvs',
              'uvv',
              'uvvv',
              'dvb',
              'fvt',
              'mxu',
              'm4u',
              'pyv',
              'uvu',
              'uvvu',
              'viv',
              'f4v',
              'fli',
              'flv',
              'm4v',
              'mkv',
              'mk3d',
              'mks',
              'mng',
              'asf',
              'asx',
              'vob',
              'wm',
              'wmv',
              'wmx',
              'wvx',
              'avi',
              'movie',
              'smv',
              'ice',
              'mht',
              null,
            ],
            example: 'pdf',
            'x-speakeasy-unknown-values': 'allow',
            nullable: true,
          },
          source_value: {
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'number',
              },
              {
                type: 'boolean',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {},
              },
            ],
            example: 'application/pdf',
            nullable: true,
          },
        },
      },
      ForbiddenResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 403,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Forbidden resource',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      InternalServerErrorResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 500,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Internal server error',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      NotFoundResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 404,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Found',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      NotImplementedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 501,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Implemented',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      PreconditionFailedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 412,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Precondition failed',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ProviderError: {
        type: 'object',
        properties: {
          status: {
            type: 'number',
            description: 'HTTP status code of the provider error',
            example: 400,
            nullable: true,
          },
          url: {
            type: 'string',
            description: 'URL that caused the error',
            example: 'https://api.provider.com/v1/resource',
            nullable: true,
          },
          raw: {
            type: 'object',
            description: 'Raw error response from the provider',
            example: {
              message: 'Invalid input parameters',
            },
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      RawResponse: {
        type: 'object',
        properties: {
          method: {
            type: 'string',
          },
          url: {
            type: 'string',
          },
          body: {
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {
                  type: 'integer',
                  format: 'int32',
                  minimum: 0,
                  maximum: 255,
                },
              },
            ],
            additionalProperties: true,
            nullable: true,
          },
          response: {
            oneOf: [
              {
                type: 'object',
                additionalProperties: true,
              },
              {
                type: 'array',
                items: {},
              },
              {
                type: 'string',
              },
            ],
            nullable: true,
          },
        },
        required: ['method', 'url'],
      },
      RequestTimedOutResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 408,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Request timed out',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      TicketingAttachment: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          ticket_id: {
            type: 'string',
            example: 'ticket-001',
            description: 'The reference ticket ID the attachment belongs to',
            nullable: true,
          },
          user_id: {
            type: 'string',
            description: 'The user who uploaded the file',
            example: 'user-001',
            nullable: true,
          },
          file_name: {
            type: 'string',
            description: 'The name of the file',
            example: 'file.pdf',
            nullable: true,
          },
          file_format: {
            description: 'The type of the file',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/FileFormatEnum',
              },
            ],
          },
          file_url: {
            type: 'string',
            description: 'The resource URL of the file',
            example: 'https://example.com/files/screenshot.png',
            nullable: true,
          },
          size: {
            type: 'number',
            description: 'The size of the file',
            example: 1024,
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      TicketingAttachmentResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingAttachment',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingAttachmentsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingAttachment',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingComment: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          ticket_id: {
            type: 'string',
            description: 'The ticket ID associated with the comment',
            example: 'ticket-001',
          },
          user_id: {
            type: 'string',
            description: 'The user who created the comment',
            example: 'user-001',
            nullable: true,
          },
          internal: {
            description: 'Whether the comment is internal',
            example: false,
            oneOf: [
              {
                type: 'boolean',
              },
              {
                type: 'string',
                enum: ['true', 'false'],
              },
            ],
            nullable: true,
          },
          content: {
            description: 'Array of content associated with the comment',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingContent',
            },
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
        required: ['ticket_id'],
      },
      TicketingCommentResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingComment',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingCommentsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingComment',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingComponent: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          organization_id: {
            type: 'string',
            description: 'The organization id related to the component',
            example: 'organization-001',
            nullable: true,
          },
          project_id: {
            type: 'string',
            description: 'The project id related to the component',
            example: 'project-001',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The name of the component',
            example: 'Component Falcon',
            nullable: true,
          },
          description: {
            type: 'string',
            description: 'The description of the component',
            example: 'Description of the component',
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      TicketingComponentResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingComponent',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingComponentsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingComponent',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingContent: {
        type: 'object',
        properties: {
          plain: {
            type: 'string',
            description: 'The content of the ticket',
            example: 'This is some content',
            nullable: true,
          },
          html: {
            type: 'string',
            description: 'The HTML content of the ticket',
            example: '<p>This is some content</p>',
            nullable: true,
          },
        },
      },
      TicketingOrganization: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          domain: {
            type: 'string',
            description: 'The domain of the organization',
            example: 'company.com',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The name of the organization',
            example: 'Company',
            nullable: true,
          },
        },
      },
      TicketingProject: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The name of the project',
            example: 'Project Falcon',
            nullable: true,
          },
          description: {
            type: 'string',
            description: 'The description of the project',
            example: 'Description of the project',
            nullable: true,
          },
          organization_id: {
            type: 'string',
            description: 'The organization id related to the project',
            example: 'organization-001',
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      TicketingProjectResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingProject',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingProjectsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingProject',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingReadTicket: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          title: {
            type: 'string',
            description: 'The title or subject of the ticket',
            example: 'System outage in production environment',
            nullable: true,
          },
          creator_id: {
            type: 'string',
            description: 'The creator of the ticket',
            example: 'user-001',
            nullable: true,
          },
          reporters: {
            description: 'Users who reported the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          assignees: {
            description: 'Agents assigned to the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          content: {
            description: 'Array of content associated with the ticket',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingContent',
            },
          },
          parent_id: {
            type: 'string',
            description: 'ID of the parent ticket if this is a sub-ticket',
            example: 'ticket-002',
            nullable: true,
          },
          priority: {
            description: 'Priority of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketPriorityTypeEnum',
              },
            ],
          },
          tags: {
            description: 'The tags of the ticket',
            example: ['tag-001', 'tag-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          projects: {
            description: 'Projects the ticket belongs to',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingProject',
            },
          },
          ticket_number: {
            type: 'string',
            example: 'ticket-001',
            description: 'The unique ticket number or reference ID',
            nullable: true,
          },
          type: {
            description: 'The type of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketType',
              },
            ],
          },
          closed_at: {
            type: 'string',
            description: 'The date the ticket was closed',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          ticket_url: {
            type: 'string',
            description: 'URL to view the ticket in the source system',
            example: 'https://help.company.com/tickets/SUP-5689',
            nullable: true,
          },
          status: {
            description: 'Current status of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketStatus',
              },
            ],
          },
          organization: {
            description: 'Organization associated with the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingOrganization',
              },
            ],
          },
          components: {
            description: 'Components associated with the ticket',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingComponent',
            },
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      TicketingTicketCreateRequestDto: {
        type: 'object',
        properties: {
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          title: {
            type: 'string',
            description: 'The title or subject of the ticket',
            example: 'System outage in production environment',
            nullable: true,
          },
          creator_id: {
            type: 'string',
            description: 'The creator of the ticket',
            example: 'user-001',
            nullable: true,
          },
          reporters: {
            description: 'Users who reported the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          assignees: {
            description: 'Agents assigned to the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          content: {
            description: 'Array of content associated with the ticket',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingContent',
            },
          },
          parent_id: {
            type: 'string',
            description: 'ID of the parent ticket if this is a sub-ticket',
            example: 'ticket-002',
            nullable: true,
          },
          priority: {
            description: 'Priority of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketPriorityTypeEnum',
              },
            ],
          },
          tags: {
            description: 'The tags of the ticket',
            example: ['tag-001', 'tag-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          organization_id: {
            type: 'string',
            description: 'Organization associated with the ticket',
            example: 'organization-001',
            nullable: true,
          },
          project_id: {
            type: 'string',
            description: 'Project the ticket belongs to',
            example: 'project-001',
            nullable: true,
          },
          component_ids: {
            type: 'string',
            description: 'Components to associate with the ticket',
            example: ['component-001', 'component-002'],
            nullable: true,
          },
          type: {
            type: 'string',
            description: 'The type of the ticket',
            example: 'ticket-type-001',
            nullable: true,
          },
        },
      },
      TicketingTicketPriorityTypeEnum: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The id of the ticket priority.',
            example: '001',
            nullable: true,
          },
          value: {
            type: 'string',
            enum: ['lowest', 'low', 'medium', 'high', 'highest', 'unmapped_value', null],
            description: 'The priority of the ticket.',
            example: 'medium',
            'x-speakeasy-unknown-values': 'allow',
            nullable: true,
          },
          source_value: {
            description: 'The source value of the ticket priority.',
            example: 'Normal',
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'number',
              },
              {
                type: 'boolean',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {},
              },
            ],
            nullable: true,
          },
        },
      },
      TicketingTicketResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingReadTicket',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingTicketsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingReadTicket',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingTicketStatus: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The id of the ticket status.',
            example: '001',
            nullable: true,
          },
          type: {
            description: 'The type of this status',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketStatusTypeEnum',
              },
            ],
          },
          name: {
            type: 'string',
            description: 'The name of the ticket status.',
            example: 'Backlog',
            nullable: true,
          },
        },
      },
      TicketingTicketStatusesPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingTicketStatus',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingTicketStatusTypeEnum: {
        type: 'object',
        properties: {
          value: {
            type: 'string',
            enum: ['to-do', 'in-progress', 'closed', 'unmapped_value', null],
            description: 'The type of this status',
            example: 'to-do',
            'x-speakeasy-unknown-values': 'allow',
            nullable: true,
          },
          source_value: {
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'number',
              },
              {
                type: 'boolean',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {},
              },
            ],
            description: 'The source value of this status type',
            example: 'New',
            nullable: true,
          },
        },
      },
      TicketingTicketType: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'The id of the ticket type.',
            example: '001',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The name of the ticket type.',
            example: 'Task',
            nullable: true,
          },
          project_id: {
            type: 'string',
            description: 'The project the ticket type belongs to.',
            example: 'project-001',
            nullable: true,
          },
        },
      },
      TicketingTicketTypePaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingTicketType',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingTicketTypeResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketType',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingTicketUpdateRequestDto: {
        type: 'object',
        properties: {
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          title: {
            type: 'string',
            description: 'The title or subject of the ticket',
            example: 'System outage in production environment',
            nullable: true,
          },
          reporters: {
            description: 'Users who reported the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          assignees: {
            description: 'Agents assigned to the ticket',
            example: ['user-001', 'user-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          content: {
            description: 'Array of content associated with the ticket',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingContent',
            },
          },
          parent_id: {
            type: 'string',
            description: 'ID of the parent ticket if this is a sub-ticket',
            example: 'ticket-002',
            nullable: true,
          },
          priority: {
            description: 'Priority of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketPriorityTypeEnum',
              },
            ],
          },
          tags: {
            description: 'The tags of the ticket',
            example: ['tag-001', 'tag-002'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          project_id: {
            type: 'string',
            description: 'Project the ticket belongs to',
            example: 'project-001',
            nullable: true,
          },
          component_ids: {
            type: 'string',
            description: 'Components to associate with the ticket',
            example: ['component-001', 'component-002'],
            nullable: true,
          },
          status: {
            description: 'Current status of the ticket',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingTicketStatus',
              },
            ],
          },
        },
      },
      TicketingUser: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          type: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingUserTypeEnum',
              },
            ],
          },
          name: {
            type: 'string',
            description: 'John Doe',
            example: 'John Doe',
            nullable: true,
          },
          primary_email: {
            type: 'string',
            description: "The user's primary email address",
            example: 'john.doe@example.com',
            nullable: true,
          },
          primary_phone: {
            type: 'string',
            description: "The user's primary phone number",
            example: '555-5555-5555',
            nullable: true,
          },
          username: {
            type: 'string',
            description: 'The username of the user in the provider system',
            example: 'johndoe',
            nullable: true,
          },
          active: {
            description: 'If the user is active',
            example: true,
            oneOf: [
              {
                type: 'boolean',
              },
              {
                type: 'string',
                enum: ['true', 'false'],
              },
            ],
            nullable: true,
          },
          first_name: {
            type: 'string',
            description: 'The first name of the user',
            example: 'John',
            nullable: true,
          },
          last_name: {
            type: 'string',
            description: 'The last name of the user',
            example: 'Doe',
            nullable: true,
          },
          customer_account_reference: {
            type: 'string',
            description:
              'The unique account reference assigned as an external user (e.g. the customer account identifier registered on the customer-facing site or portal)',
            example: 'JohnDoe123',
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'The timestamp when the record was created',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The timestamp when the record was last updated',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      TicketingUserResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/TicketingUser',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingUsersPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/TicketingUser',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      TicketingUserTypeEnum: {
        type: 'object',
        properties: {
          value: {
            type: 'string',
            enum: ['agent', 'contact', 'bot', 'unmapped_value', null],
            description: 'The type of the user.',
            example: 'agent',
            'x-speakeasy-unknown-values': 'allow',
            nullable: true,
          },
          source_value: {
            description: 'The source value of the user type.',
            example: 'Live',
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'number',
              },
              {
                type: 'boolean',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {},
              },
            ],
            nullable: true,
          },
        },
      },
      TooManyRequestsResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 429,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Too many requests',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnauthorizedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 401,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unauthorized',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnifiedError: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
            nullable: true,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      UnprocessableEntityResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 422,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unprocessable Entity',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UpdateResult: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            example: 200,
          },
          message: {
            type: 'string',
            example: 'Record updated successfully.',
          },
          timestamp: {
            type: 'string',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
    },
  },
};
