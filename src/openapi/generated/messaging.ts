// Generated OpenAPI specification for messaging
// DO NOT EDIT THIS FILE DIRECTLY
export const messagingSpec = {
  openapi: '3.1.0',
  paths: {
    '/unified/messaging/conversations': {
      get: {
        operationId: 'messaging_list_conversations',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,participants,name,private,created_at,last_message_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of conversations was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingConversationsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Conversations',
        tags: ['Conversations'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'list_conversations',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
      post: {
        operationId: 'messaging_create_conversation',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
        ],
        requestBody: {
          required: true,
          content: {
            'application/json': {
              schema: {
                $ref: '#/components/schemas/MessagingCreateConversationRequestDto',
              },
            },
          },
        },
        responses: {
          '201': {
            description: 'The conversation was created successfully.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/CreateResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Create Conversation',
        tags: ['Conversations'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'create_conversation',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/conversations/{id}': {
      get: {
        operationId: 'messaging_get_conversation',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,participants,name,private,created_at,last_message_at',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The conversation with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingConversationResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Conversation',
        tags: ['Conversations'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'get_conversation',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/attachments/{id}/download': {
      get: {
        operationId: 'messaging_download_messaging_attachment',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'format',
            required: false,
            in: 'query',
            description: 'The format to download the file in',
            schema: {
              nullable: true,
              example: 'base64',
              type: 'string',
            },
          },
          {
            name: 'export_format',
            required: false,
            in: 'query',
            description: 'The export format of the file',
            schema: {
              nullable: true,
              example: 'text/plain',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The attachment file was downloaded successfully.',
            content: {
              '*/*': {
                schema: {
                  type: 'string',
                  format: 'binary',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Download Attachment',
        tags: ['Messages', 'Attachments'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'download_messaging_attachment',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/messages/{id}/attachments': {
      get: {
        operationId: 'messaging_list_attachments',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,file_name,file_size,file_type',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of attachments was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingAttachmentsPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Attachments',
        tags: ['Messages', 'Attachments'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'list_attachments',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/messages/{id}/attachments/{subResourceId}': {
      get: {
        operationId: 'messaging_get_attachment',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'subResourceId',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,file_name,file_size,file_type',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The attachment with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingAttachmentResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get Attachment',
        tags: ['Messages', 'Attachments'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'get_attachment',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/users': {
      get: {
        operationId: 'messaging_list_users',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,email,username,name,first_name,last_name,bot,active',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of users was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingUsersPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Users',
        tags: ['Users'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'list_users',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/users/{id}': {
      get: {
        operationId: 'messaging_get_user',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example: 'id,remote_id,email,username,name,first_name,last_name,bot,active',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The user with the given identifier was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingUserResult',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'Get User',
        tags: ['Users'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'get_user',
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
    '/unified/messaging/conversations/{id}/messages': {
      get: {
        operationId: 'messaging_list_conversation_messages',
        parameters: [
          {
            name: 'x-account-id',
            in: 'header',
            description: 'The account identifier',
            required: true,
            schema: {
              type: 'string',
            },
          },
          {
            name: 'id',
            required: true,
            in: 'path',
            schema: {
              type: 'string',
            },
          },
          {
            name: 'raw',
            required: false,
            in: 'query',
            description:
              'Indicates that the raw request result should be returned in addition to the mapped result (default value is false)',
            schema: {
              nullable: true,
              type: 'boolean',
            },
          },
          {
            name: 'proxy',
            required: false,
            in: 'query',
            description:
              "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key",
            style: 'deepObject',
            explode: true,
            schema: {
              additionalProperties: true,
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'fields',
            required: false,
            in: 'query',
            description:
              'The comma separated list of fields that will be returned in the response (if empty, all fields are returned)',
            schema: {
              nullable: true,
              example:
                'id,remote_id,content,parent_message_id,remote_parent_message_id,attachments,author,created_at,updated_at',
              type: 'string',
            },
          },
          {
            name: 'filter',
            required: false,
            in: 'query',
            description: 'Filter parameters that allow greater customisation of the list response',
            explode: true,
            style: 'deepObject',
            schema: {
              properties: {
                updated_after: {
                  description:
                    'Use a string with a date to only select results updated after that given date',
                  example: '2020-01-01T00:00:00.000Z',
                  type: 'string',
                  nullable: true,
                  additionalProperties: false,
                },
              },
              nullable: true,
              type: 'object',
            },
          },
          {
            name: 'page',
            required: false,
            in: 'query',
            description: 'The page number of the results to fetch',
            deprecated: true,
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'page_size',
            required: false,
            in: 'query',
            description: 'The number of results per page (default value is 25)',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'next',
            required: false,
            in: 'query',
            description: 'The unified cursor',
            schema: {
              nullable: true,
              type: 'string',
            },
          },
          {
            name: 'updated_after',
            required: false,
            in: 'query',
            description:
              'Use a string with a date to only select results updated after that given date',
            deprecated: true,
            schema: {
              nullable: true,
              example: '2020-01-01T00:00:00.000Z',
              type: 'string',
            },
          },
        ],
        responses: {
          '200': {
            description: 'The list of messages in the conversation was retrieved.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/MessagingMessagesPaginated',
                },
              },
            },
          },
          '400': {
            description: 'Invalid request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadRequestResponse',
                },
              },
            },
          },
          '401': {
            description: 'Unauthorized access.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnauthorizedResponse',
                },
              },
            },
          },
          '403': {
            description: 'Forbidden.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ForbiddenResponse',
                },
              },
            },
          },
          '404': {
            description: 'Resource not found.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotFoundResponse',
                },
              },
            },
          },
          '408': {
            description: 'The request has timed out.',
            headers: {
              'Retry-After': {
                description: 'A time in seconds after which the request can be retried.',
                schema: {
                  type: 'string',
                },
              },
            },
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/RequestTimedOutResponse',
                },
              },
            },
          },
          '409': {
            description: 'Conflict with current state.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/ConflictResponse',
                },
              },
            },
          },
          '412': {
            description: 'Precondition failed: linked account belongs to a disabled integration.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/PreconditionFailedResponse',
                },
              },
            },
          },
          '422': {
            description: 'Validation error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/UnprocessableEntityResponse',
                },
              },
            },
          },
          '429': {
            description: 'Too many requests.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/TooManyRequestsResponse',
                },
              },
            },
          },
          '500': {
            description: 'Server error while executing the request.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/InternalServerErrorResponse',
                },
              },
            },
          },
          '501': {
            description: 'This functionality is not implemented.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/NotImplementedResponse',
                },
              },
            },
          },
          '502': {
            description: 'Bad gateway error.',
            content: {
              'application/json': {
                schema: {
                  $ref: '#/components/schemas/BadGatewayResponse',
                },
              },
            },
          },
        },
        security: [
          {
            basic: [],
          },
        ],
        summary: 'List Conversation Messages',
        tags: ['Conversations', 'Messages'],
        'x-speakeasy-group': 'messaging',
        'x-speakeasy-name-override': 'list_conversation_messages',
        'x-speakeasy-pagination': {
          type: 'cursor',
          inputs: [
            {
              name: 'next',
              in: 'parameters',
              type: 'cursor',
            },
          ],
          outputs: {
            nextCursor: '$.next',
          },
        },
        'x-speakeasy-retries': {
          statusCodes: [429, 408],
          strategy: 'backoff',
        },
      },
    },
  },
  info: {
    title: 'Messaging',
    description: 'The documentation for the StackOne Unified API - MESSAGING',
    version: '1.0.0',
    contact: {},
  },
  tags: [
    {
      name: 'Conversations',
      description: '',
    },
    {
      name: 'Messages',
      description: '',
    },
    {
      name: 'Attachments',
      description: '',
    },
    {
      name: 'Users',
      description: '',
    },
  ],
  servers: [
    {
      url: 'https://api.stackone.com',
    },
  ],
  components: {
    securitySchemes: {
      basic: {
        type: 'http',
        scheme: 'basic',
      },
    },
    schemas: {
      BadGatewayResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 502,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Gateway',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      BadRequestResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
          data: {
            description: 'Error details',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/UnifiedError',
              },
            ],
          },
          provider_errors: {
            description: 'List of provider-specific errors',
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/ProviderError',
            },
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ConflictResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 409,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Conflict',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      CreateResult: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            example: 201,
          },
          message: {
            type: 'string',
            example: 'Record created successfully.',
          },
          timestamp: {
            type: 'string',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
          },
          data: {
            $ref: '#/components/schemas/CreateResultDataApiModel',
          },
        },
        required: ['statusCode', 'message', 'timestamp', 'data'],
      },
      CreateResultDataApiModel: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
        },
      },
      ForbiddenResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 403,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Forbidden resource',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      InternalServerErrorResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 500,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Internal server error',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      LmsUser: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          unified_custom_fields: {
            type: 'object',
            description: 'Custom Unified Fields configured in your StackOne project',
            additionalProperties: true,
            example: {
              my_project_custom_field_1: 'REF-1236',
              my_project_custom_field_2: 'some other value',
            },
            nullable: true,
          },
          external_reference: {
            type: 'string',
            description: 'The external ID associated with this user',
            example: 'al60043',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'The user name',
            example: 'John Dew',
            nullable: true,
          },
          email: {
            type: 'string',
            description: 'The user email',
            example: 'john@dew.com',
            nullable: true,
          },
          phone_number: {
            type: 'string',
            description: 'The user phone number',
            example: '+1234567890',
            nullable: true,
          },
          active: {
            type: 'boolean',
            description: 'The user active status',
            example: true,
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'The created_at date',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'The updated_at date',
            example: '2021-01-01T01:01:01.000Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      MessagingAttachment: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          file_name: {
            type: 'string',
            description: 'Name of the attached file',
            example: 'document.pdf',
            nullable: true,
          },
          file_size: {
            type: 'number',
            description: 'Size of the attached file',
            example: 1024,
            nullable: true,
          },
          file_type: {
            type: 'string',
            description: 'MIME type of the attached file',
            example: 'application/pdf',
            nullable: true,
          },
        },
      },
      MessagingAttachmentResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/MessagingAttachment',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingAttachmentsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/MessagingAttachment',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingConversation: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          participants: {
            description: 'List of participant user IDs in the conversation',
            example: ['c28xIQ1', 'c28xIQ2'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          name: {
            type: 'string',
            description: 'Name or title of the conversation',
            example: 'Project Discussion',
            nullable: true,
          },
          private: {
            type: 'boolean',
            description: 'Whether the conversation is private',
            example: true,
            nullable: true,
          },
          created_at: {
            type: 'string',
            description: 'Timestamp when the conversation was created',
            example: '2024-03-20T10:00:00Z',
            format: 'date-time',
            nullable: true,
          },
          last_message_at: {
            type: 'string',
            description: 'Timestamp of the last message in the conversation',
            example: '2024-03-20T11:30:00Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      MessagingConversationResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/MessagingConversation',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingConversationsPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/MessagingConversation',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingCreateConversationRequestDto: {
        type: 'object',
        properties: {
          participants: {
            description: 'List of participant user IDs in the conversation',
            example: ['c28xIQ1', 'c28xIQ2'],
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          name: {
            type: 'string',
            description: 'Name or title of the conversation',
            example: 'Project Discussion',
            nullable: true,
          },
          private: {
            type: 'boolean',
            description: 'Whether the conversation is private',
            example: true,
            nullable: true,
          },
        },
      },
      MessagingMessage: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          content: {
            description: 'Content of the message',
            example: {
              html: '<p>Hello world</p>',
              plain: 'Hello world',
            },
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/MessagingMessageContent',
              },
            ],
          },
          parent_message_id: {
            type: 'string',
            description: 'ID of the parent message if this is a reply',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          attachments: {
            description: 'List of attachments in the message',
            nullable: true,
            type: 'array',
            items: {
              type: 'string',
            },
          },
          author: {
            description: 'Author of the message',
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/LmsUser',
              },
            ],
          },
          created_at: {
            type: 'string',
            description: 'Timestamp when the message was created',
            example: '2024-03-20T10:00:00Z',
            format: 'date-time',
            nullable: true,
          },
          updated_at: {
            type: 'string',
            description: 'Timestamp when the message was last updated',
            example: '2024-03-20T10:00:00Z',
            format: 'date-time',
            nullable: true,
          },
        },
      },
      MessagingMessageContent: {
        type: 'object',
        properties: {
          html: {
            type: 'string',
            description: 'HTML content of the message',
            example: '<p>Hello world</p>',
            nullable: true,
          },
          plain: {
            type: 'string',
            description: 'Plain text content of the message',
            example: 'Hello world',
            nullable: true,
          },
        },
      },
      MessagingMessagesPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/MessagingMessage',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingUser: {
        type: 'object',
        properties: {
          id: {
            type: 'string',
            description: 'Unique identifier',
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          remote_id: {
            type: 'string',
            description: "Provider's unique identifier",
            example: '8187e5da-dc77-475e-9949-af0f1fa4e4e3',
            nullable: true,
          },
          email: {
            type: 'string',
            description: 'Email address of the user',
            example: 'john.doe@example.com',
            nullable: true,
          },
          username: {
            type: 'string',
            description: 'Username of the user',
            example: 'johndoe',
            nullable: true,
          },
          name: {
            type: 'string',
            description: 'Full name of the user',
            example: 'John Doe',
            nullable: true,
          },
          first_name: {
            type: 'string',
            description: 'First name of the user',
            example: 'John',
            nullable: true,
          },
          last_name: {
            type: 'string',
            description: 'Last name of the user',
            example: 'Doe',
            nullable: true,
          },
          bot: {
            type: 'boolean',
            description: 'Whether the user is a bot',
            example: false,
            nullable: true,
          },
          active: {
            type: 'boolean',
            description: 'Whether the user is active',
            example: true,
            nullable: true,
          },
        },
      },
      MessagingUserResult: {
        type: 'object',
        properties: {
          data: {
            nullable: true,
            allOf: [
              {
                $ref: '#/components/schemas/MessagingUser',
              },
            ],
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      MessagingUsersPaginated: {
        type: 'object',
        properties: {
          next: {
            type: 'string',
            nullable: true,
          },
          data: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/MessagingUser',
            },
          },
          raw: {
            nullable: true,
            type: 'array',
            items: {
              $ref: '#/components/schemas/RawResponse',
            },
          },
        },
      },
      NotFoundResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 404,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Found',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      NotImplementedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 501,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Not Implemented',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      PreconditionFailedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 412,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Precondition failed',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      ProviderError: {
        type: 'object',
        properties: {
          status: {
            type: 'number',
            description: 'HTTP status code of the provider error',
            example: 400,
            nullable: true,
          },
          url: {
            type: 'string',
            description: 'URL that caused the error',
            example: 'https://api.provider.com/v1/resource',
            nullable: true,
          },
          raw: {
            type: 'object',
            description: 'Raw error response from the provider',
            example: {
              message: 'Invalid input parameters',
            },
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      RawResponse: {
        type: 'object',
        properties: {
          method: {
            type: 'string',
          },
          url: {
            type: 'string',
          },
          body: {
            oneOf: [
              {
                type: 'string',
              },
              {
                type: 'object',
              },
              {
                type: 'array',
                items: {
                  type: 'integer',
                  format: 'int32',
                  minimum: 0,
                  maximum: 255,
                },
              },
            ],
            additionalProperties: true,
            nullable: true,
          },
          response: {
            oneOf: [
              {
                type: 'object',
                additionalProperties: true,
              },
              {
                type: 'array',
                items: {},
              },
              {
                type: 'string',
              },
            ],
            nullable: true,
          },
        },
        required: ['method', 'url'],
      },
      RequestTimedOutResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 408,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Request timed out',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      TooManyRequestsResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 429,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Too many requests',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnauthorizedResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 401,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unauthorized',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
      UnifiedError: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 400,
            nullable: true,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Bad Request',
            nullable: true,
          },
          headers: {
            type: 'object',
            description: 'Response headers',
            example: {
              'content-type': 'application/json',
              'x-request-id': '5678c28b211dace4e0a0f9171e6b88c5',
            },
            nullable: true,
          },
        },
      },
      UnprocessableEntityResponse: {
        type: 'object',
        properties: {
          statusCode: {
            type: 'number',
            description: 'HTTP status code',
            example: 422,
          },
          message: {
            type: 'string',
            description: 'Error message',
            example: 'Unprocessable Entity',
          },
          timestamp: {
            type: 'string',
            description: 'Timestamp when the error occurred',
            example: '2023-05-30T00:00:00.000Z',
            format: 'date-time',
          },
        },
        required: ['statusCode', 'message', 'timestamp'],
      },
    },
  },
};
