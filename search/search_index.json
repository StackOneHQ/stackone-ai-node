{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StackOne AI SDK # Installation # # Using npm npm install @stackone/ai # Using yarn yarn add @stackone/ai # Using bun bun add @stackone/ai Authentication # Set the STACKONE_API_KEY environment variable: export STACKONE_API_KEY = <your-api-key> or load from a .env file: // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); Account IDs # StackOne uses account IDs to identify different integrations. See the example in the README for more details. This example will hardcode the account ID: const accountId = '45072196112816593343' ; Quickstart # import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const quickstart = async () : Promise < void > => { const toolset = new StackOneToolSet (); // Get all HRIS-related tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Verify we have tools assert ( tools . length > 0 , 'Expected to find HRIS tools' ); // Use a specific tool const employeeTool = tools . getTool ( 'hris_list_employees' ); assert ( employeeTool !== undefined , 'Expected to find hris_list_employees tool' ); // Execute the tool and verify the response const employees = await employeeTool . execute (); assert ( Array . isArray ( employees ), 'Expected employees to be an array' ); assert ( employees . length > 0 , 'Expected to find at least one employee' ); }; // Run the example quickstart (); Next Steps # Check out some more examples: OpenAI Integration AI SDK Integration Error Handling File Uploads Custom Base URL Account ID Usage","title":"Home"},{"location":"#stackone-ai-sdk","text":"","title":"StackOne AI SDK"},{"location":"#installation","text":"# Using npm npm install @stackone/ai # Using yarn yarn add @stackone/ai # Using bun bun add @stackone/ai","title":"Installation"},{"location":"#authentication","text":"Set the STACKONE_API_KEY environment variable: export STACKONE_API_KEY = <your-api-key> or load from a .env file: // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config ();","title":"Authentication"},{"location":"#account-ids","text":"StackOne uses account IDs to identify different integrations. See the example in the README for more details. This example will hardcode the account ID: const accountId = '45072196112816593343' ;","title":"Account IDs"},{"location":"#quickstart","text":"import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const quickstart = async () : Promise < void > => { const toolset = new StackOneToolSet (); // Get all HRIS-related tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Verify we have tools assert ( tools . length > 0 , 'Expected to find HRIS tools' ); // Use a specific tool const employeeTool = tools . getTool ( 'hris_list_employees' ); assert ( employeeTool !== undefined , 'Expected to find hris_list_employees tool' ); // Execute the tool and verify the response const employees = await employeeTool . execute (); assert ( Array . isArray ( employees ), 'Expected employees to be an array' ); assert ( employees . length > 0 , 'Expected to find at least one employee' ); }; // Run the example quickstart ();","title":"Quickstart"},{"location":"#next-steps","text":"Check out some more examples: OpenAI Integration AI SDK Integration Error Handling File Uploads Custom Base URL Account ID Usage","title":"Next Steps"},{"location":"account-id-usage/","text":"Account Id Usage # Example demonstrating different ways to set the account ID when using StackOne tools. This example shows: 1. Setting account ID when initializing the toolset 2. Setting account ID when getting tools 3. Using setAccountId method directly on a tool Usage: bun run examples/account-id-usage.ts import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const accountIdUsage = async () : Promise < void > => { // Set account ID from toolset initialization const toolset = new StackOneToolSet ({ accountId : 'initial-account-id' }); const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_list_employees' ); assert ( employeeTool ? . getAccountId () === 'initial-account-id' , 'Account ID should match what was set' ); // Setting account ID when getting tools (overrides toolset account ID) const toolsWithOverride = toolset . getTools ( 'hris_*' , 'override-account-id' ); const employeeToolWithOverride = toolsWithOverride . getTool ( 'hris_list_employees' ); assert ( employeeToolWithOverride ? . getAccountId () === 'override-account-id' , 'Account ID should match what was set' ); // Set the account ID directly on the tool employeeTool . setAccountId ( 'direct-account-id' ); assert ( employeeTool . getAccountId () === 'direct-account-id' , 'Account ID should match what was set' ); }; accountIdUsage ();","title":"Account Id Usage"},{"location":"account-id-usage/#account-id-usage","text":"Example demonstrating different ways to set the account ID when using StackOne tools. This example shows: 1. Setting account ID when initializing the toolset 2. Setting account ID when getting tools 3. Using setAccountId method directly on a tool Usage: bun run examples/account-id-usage.ts import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const accountIdUsage = async () : Promise < void > => { // Set account ID from toolset initialization const toolset = new StackOneToolSet ({ accountId : 'initial-account-id' }); const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_list_employees' ); assert ( employeeTool ? . getAccountId () === 'initial-account-id' , 'Account ID should match what was set' ); // Setting account ID when getting tools (overrides toolset account ID) const toolsWithOverride = toolset . getTools ( 'hris_*' , 'override-account-id' ); const employeeToolWithOverride = toolsWithOverride . getTool ( 'hris_list_employees' ); assert ( employeeToolWithOverride ? . getAccountId () === 'override-account-id' , 'Account ID should match what was set' ); // Set the account ID directly on the tool employeeTool . setAccountId ( 'direct-account-id' ); assert ( employeeTool . getAccountId () === 'direct-account-id' , 'Account ID should match what was set' ); }; accountIdUsage ();","title":"Account Id Usage"},{"location":"ai-sdk-integration/","text":"Ai Sdk Integration # This example shows how to use StackOne tools with the AI SDK. import assert from 'node:assert' ; import { openai } from '@ai-sdk/openai' ; import { generateText } from 'ai' ; import { StackOneToolSet } from '../src' ; const aiSdkIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get HRIS tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Convert to AI SDK tools const aiSdkTools = tools . toAISDK (); // Use max steps to automatically call the tool if it's needed const { text } = await generateText ({ model : openai ( 'gpt-4o-mini' ), tools : aiSdkTools , prompt : 'Get all details about employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , maxSteps : 3 , }); assert ( text . includes ( 'Isac Newton' ), 'Expected employee name to be included in the response' ); }; aiSdkIntegration ();","title":"Ai Sdk Integration"},{"location":"ai-sdk-integration/#ai-sdk-integration","text":"This example shows how to use StackOne tools with the AI SDK. import assert from 'node:assert' ; import { openai } from '@ai-sdk/openai' ; import { generateText } from 'ai' ; import { StackOneToolSet } from '../src' ; const aiSdkIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get HRIS tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Convert to AI SDK tools const aiSdkTools = tools . toAISDK (); // Use max steps to automatically call the tool if it's needed const { text } = await generateText ({ model : openai ( 'gpt-4o-mini' ), tools : aiSdkTools , prompt : 'Get all details about employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , maxSteps : 3 , }); assert ( text . includes ( 'Isac Newton' ), 'Expected employee name to be included in the response' ); }; aiSdkIntegration ();","title":"Ai Sdk Integration"},{"location":"custom-base-url/","text":"Custom Base Url # Example demonstrating how to use a custom base URL with StackOne tools. This is useful for: 1. Testing against development APIs 2. Working with self-hosted StackOne instances Usage: bun run examples/custom-base-url.ts import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const customBaseUrl = async () : Promise < void > => { Default base URL const defaultToolset = new StackOneToolSet (); const hrisTools = defaultToolset . getTools ( 'hris_*' ); assert ( hrisTools . length > 0 , 'Should have at least one HRIS tool' ); const defaultTool = hrisTools . getTool ( 'hris_get_employee' ); if ( ! defaultTool ) { throw new Error ( 'Tool not found' ); } Custom base URL const devToolset = new StackOneToolSet ({ baseUrl : 'https://api.example-dev.com' , }); const devHrisTools = devToolset . getTools ( 'hris_*' ); assert ( devHrisTools . length > 0 , 'Should have at least one HRIS tool' ); const devTool = devHrisTools . getTool ( 'hris_get_employee' ); if ( ! devTool ) { throw new Error ( 'Tool not found' ); } Note this uses the same tools but substitutes the base URL if ( defaultTool && devTool ) { assert ( defaultTool . name === devTool . name , 'Tool names should be the same' ); assert ( defaultTool . _executeConfig . url . includes ( 'https://api.stackone.com' ), 'Default tool should use the default base URL' ); assert ( devTool . _executeConfig . url . includes ( 'https://api.example-dev.com' ), 'Custom tool should use the custom base URL' ); } }; customBaseUrl ();","title":"Custom Base Url"},{"location":"custom-base-url/#custom-base-url","text":"Example demonstrating how to use a custom base URL with StackOne tools. This is useful for: 1. Testing against development APIs 2. Working with self-hosted StackOne instances Usage: bun run examples/custom-base-url.ts import assert from 'node:assert' ; import { StackOneToolSet } from '../src' ; const customBaseUrl = async () : Promise < void > => { Default base URL const defaultToolset = new StackOneToolSet (); const hrisTools = defaultToolset . getTools ( 'hris_*' ); assert ( hrisTools . length > 0 , 'Should have at least one HRIS tool' ); const defaultTool = hrisTools . getTool ( 'hris_get_employee' ); if ( ! defaultTool ) { throw new Error ( 'Tool not found' ); } Custom base URL const devToolset = new StackOneToolSet ({ baseUrl : 'https://api.example-dev.com' , }); const devHrisTools = devToolset . getTools ( 'hris_*' ); assert ( devHrisTools . length > 0 , 'Should have at least one HRIS tool' ); const devTool = devHrisTools . getTool ( 'hris_get_employee' ); if ( ! devTool ) { throw new Error ( 'Tool not found' ); } Note this uses the same tools but substitutes the base URL if ( defaultTool && devTool ) { assert ( defaultTool . name === devTool . name , 'Tool names should be the same' ); assert ( defaultTool . _executeConfig . url . includes ( 'https://api.stackone.com' ), 'Default tool should use the default base URL' ); assert ( devTool . _executeConfig . url . includes ( 'https://api.example-dev.com' ), 'Custom tool should use the custom base URL' ); } }; customBaseUrl ();","title":"Custom Base Url"},{"location":"error-handling/","text":"Error Handling # Error Handling # This example shows how to handle errors when using the StackOne SDK. import assert from 'node:assert' ; import { StackOneAPIError , StackOneError , StackOneToolSet , ToolsetConfigError } from '../src' ; const errorHandling = async () : Promise < void > => { // Example 1: Handle initialization errors const testInitializationErrors = async () : Promise < void > => { // Temporarily save the API key const originalKey = process . env . STACKONE_API_KEY ; // Delete the API key to force an error process . env . STACKONE_API_KEY = undefined ; try { // This will throw a ToolsetConfigError const _toolset = new StackOneToolSet (); assert ( false , 'Expected ToolsetConfigError was not thrown' ); } catch ( error ) { assert ( error instanceof ToolsetConfigError , 'Expected error to be ToolsetConfigError' ); } finally { // Restore the API key process . env . STACKONE_API_KEY = originalKey ; } }; // Example 2: Handle API errors const testApiErrors = async () : Promise < void > => { const toolset = new StackOneToolSet (); const accountId = 'invalid-account-id' ; // Invalid account ID to force an error try { const tools = toolset . getTools ( 'hris_*' , accountId ); const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { // This will throw a StackOneAPIError due to the invalid account ID await employeeTool . execute (); assert ( false , 'Expected StackOneAPIError was not thrown' ); } } catch ( error ) { assert ( error instanceof StackOneAPIError || error instanceof StackOneError , 'Expected error to be StackOneAPIError or StackOneError' ); if ( error instanceof StackOneAPIError ) { assert ( error . statusCode !== undefined , 'Expected statusCode to be defined' ); assert ( error . responseBody !== undefined , 'Expected responseBody to be defined' ); } } }; // Example 3: Handle invalid tool name const testInvalidToolName = async () : Promise < void > => { const toolset = new StackOneToolSet (); const tools = toolset . getTools ( 'hris_*' ); const nonExistentTool = tools . getTool ( 'non_existent_tool' ); assert ( nonExistentTool === undefined , 'Expected non-existent tool to be undefined' ); }; // Example 4: Handle invalid arguments const testInvalidArguments = async () : Promise < void > => { const toolset = new StackOneToolSet (); const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_get_employee' ); if ( employeeTool ) { try { // This will throw an error due to missing required arguments await employeeTool . execute (); assert ( false , 'Expected error was not thrown for missing arguments' ); } catch ( error ) { assert ( error instanceof StackOneAPIError || error instanceof StackOneError || error instanceof Error , 'Expected error to be a known error type' ); } } }; // Run all tests await testInitializationErrors (); await testApiErrors (); await testInvalidToolName (); await testInvalidArguments (); }; // Run the example errorHandling ();","title":"Error Handling"},{"location":"error-handling/#error-handling","text":"","title":"Error Handling"},{"location":"error-handling/#error-handling_1","text":"This example shows how to handle errors when using the StackOne SDK. import assert from 'node:assert' ; import { StackOneAPIError , StackOneError , StackOneToolSet , ToolsetConfigError } from '../src' ; const errorHandling = async () : Promise < void > => { // Example 1: Handle initialization errors const testInitializationErrors = async () : Promise < void > => { // Temporarily save the API key const originalKey = process . env . STACKONE_API_KEY ; // Delete the API key to force an error process . env . STACKONE_API_KEY = undefined ; try { // This will throw a ToolsetConfigError const _toolset = new StackOneToolSet (); assert ( false , 'Expected ToolsetConfigError was not thrown' ); } catch ( error ) { assert ( error instanceof ToolsetConfigError , 'Expected error to be ToolsetConfigError' ); } finally { // Restore the API key process . env . STACKONE_API_KEY = originalKey ; } }; // Example 2: Handle API errors const testApiErrors = async () : Promise < void > => { const toolset = new StackOneToolSet (); const accountId = 'invalid-account-id' ; // Invalid account ID to force an error try { const tools = toolset . getTools ( 'hris_*' , accountId ); const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { // This will throw a StackOneAPIError due to the invalid account ID await employeeTool . execute (); assert ( false , 'Expected StackOneAPIError was not thrown' ); } } catch ( error ) { assert ( error instanceof StackOneAPIError || error instanceof StackOneError , 'Expected error to be StackOneAPIError or StackOneError' ); if ( error instanceof StackOneAPIError ) { assert ( error . statusCode !== undefined , 'Expected statusCode to be defined' ); assert ( error . responseBody !== undefined , 'Expected responseBody to be defined' ); } } }; // Example 3: Handle invalid tool name const testInvalidToolName = async () : Promise < void > => { const toolset = new StackOneToolSet (); const tools = toolset . getTools ( 'hris_*' ); const nonExistentTool = tools . getTool ( 'non_existent_tool' ); assert ( nonExistentTool === undefined , 'Expected non-existent tool to be undefined' ); }; // Example 4: Handle invalid arguments const testInvalidArguments = async () : Promise < void > => { const toolset = new StackOneToolSet (); const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_get_employee' ); if ( employeeTool ) { try { // This will throw an error due to missing required arguments await employeeTool . execute (); assert ( false , 'Expected error was not thrown for missing arguments' ); } catch ( error ) { assert ( error instanceof StackOneAPIError || error instanceof StackOneError || error instanceof Error , 'Expected error to be a known error type' ); } } }; // Run all tests await testInitializationErrors (); await testApiErrors (); await testInvalidToolName (); await testInvalidArguments (); }; // Run the example errorHandling ();","title":"Error Handling"},{"location":"file-uploads/","text":"File Uploads # Example showing how to upload files using the StackOne SDK. This example demonstrates how to upload files using the simplified file_path parameter, which is the only parameter needed for file uploads. The SDK automatically derives the necessary file parameters (content, name, file_format) from the file_path. import assert from 'node:assert' ; import * as fs from 'node:fs' ; import * as path from 'node:path' ; import { StackOneToolSet } from '../src' ; const accountId = '45072196112816593343' ; const fileUploads = async () : Promise < void > => { // Create a sample file for testing const sampleFilePath = path . join ( __dirname , 'sample-file.txt' ); fs . writeFileSync ( sampleFilePath , 'This is a sample file for testing file uploads.' ); try { // Initialize the StackOne toolset const toolset = new StackOneToolSet (); // Get tools for documents const tools = toolset . getTools ( 'hris_*' , accountId ); // Get the upload file tool const uploadTool = tools . getTool ( 'hris_upload_employee_document' ); // Check if upload tool exists assert ( uploadTool !== undefined , 'Upload document tool not found' ); // Upload a file using the file_path parameter // The SDK will automatically derive content, name, and file_format from the file_path const result = await uploadTool . execute ({ file_path : sampleFilePath , id : 'c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , category : { value : 'shared' }, }); // Verify the result assert ( result !== undefined , 'Expected result to be defined' ); assert ( typeof result === 'object' , 'Expected result to be an object' ); } finally { // Clean up the sample file if ( fs . existsSync ( sampleFilePath )) { fs . unlinkSync ( sampleFilePath ); } } }; fileUploads ();","title":"File Uploads"},{"location":"file-uploads/#file-uploads","text":"Example showing how to upload files using the StackOne SDK. This example demonstrates how to upload files using the simplified file_path parameter, which is the only parameter needed for file uploads. The SDK automatically derives the necessary file parameters (content, name, file_format) from the file_path. import assert from 'node:assert' ; import * as fs from 'node:fs' ; import * as path from 'node:path' ; import { StackOneToolSet } from '../src' ; const accountId = '45072196112816593343' ; const fileUploads = async () : Promise < void > => { // Create a sample file for testing const sampleFilePath = path . join ( __dirname , 'sample-file.txt' ); fs . writeFileSync ( sampleFilePath , 'This is a sample file for testing file uploads.' ); try { // Initialize the StackOne toolset const toolset = new StackOneToolSet (); // Get tools for documents const tools = toolset . getTools ( 'hris_*' , accountId ); // Get the upload file tool const uploadTool = tools . getTool ( 'hris_upload_employee_document' ); // Check if upload tool exists assert ( uploadTool !== undefined , 'Upload document tool not found' ); // Upload a file using the file_path parameter // The SDK will automatically derive content, name, and file_format from the file_path const result = await uploadTool . execute ({ file_path : sampleFilePath , id : 'c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , category : { value : 'shared' }, }); // Verify the result assert ( result !== undefined , 'Expected result to be defined' ); assert ( typeof result === 'object' , 'Expected result to be an object' ); } finally { // Clean up the sample file if ( fs . existsSync ( sampleFilePath )) { fs . unlinkSync ( sampleFilePath ); } } }; fileUploads ();","title":"File Uploads"},{"location":"openai-integration/","text":"Openai Integration # This example shows how to use StackOne tools with OpenAI. import assert from 'node:assert' ; import OpenAI from 'openai' ; import { StackOneToolSet } from '../src' ; const openaiIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get the correct tool const tools = toolset . getTools ( 'hris_get_employee' , accountId ); const openAITools = tools . toOpenAI (); // Initialize OpenAI client const openai = new OpenAI (); // Create a chat completion with tool calls const response = await openai . chat . completions . create ({ model : 'gpt-4o-mini' , messages : [ { role : 'system' , content : 'You are a helpful assistant that can access HRIS information.' , }, { role : 'user' , content : 'What is the employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA phone number?' , }, ], tools : openAITools , }); // Verify the response contains tool calls assert ( response . choices . length > 0 , 'Expected at least one choice in the response' ); const choice = response . choices [ 0 ]; assert ( choice . message . tool_calls !== undefined , 'Expected tool_calls to be defined' ); assert ( choice . message . tool_calls . length > 0 , 'Expected at least one tool call' ); const toolCall = choice . message . tool_calls [ 0 ]; assert ( toolCall . function . name === 'hris_get_employee' , 'Expected tool call to be hris_get_employee' ); // Parse the arguments to verify they contain the expected fields const args = JSON . parse ( toolCall . function . arguments ); assert ( args . id === 'c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , 'Expected id to match the query' ); assert ( args . fields !== undefined , 'Expected fields to be defined' ); }; // Run the example openaiIntegration ();","title":"OpenAI"},{"location":"openai-integration/#openai-integration","text":"This example shows how to use StackOne tools with OpenAI. import assert from 'node:assert' ; import OpenAI from 'openai' ; import { StackOneToolSet } from '../src' ; const openaiIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get the correct tool const tools = toolset . getTools ( 'hris_get_employee' , accountId ); const openAITools = tools . toOpenAI (); // Initialize OpenAI client const openai = new OpenAI (); // Create a chat completion with tool calls const response = await openai . chat . completions . create ({ model : 'gpt-4o-mini' , messages : [ { role : 'system' , content : 'You are a helpful assistant that can access HRIS information.' , }, { role : 'user' , content : 'What is the employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA phone number?' , }, ], tools : openAITools , }); // Verify the response contains tool calls assert ( response . choices . length > 0 , 'Expected at least one choice in the response' ); const choice = response . choices [ 0 ]; assert ( choice . message . tool_calls !== undefined , 'Expected tool_calls to be defined' ); assert ( choice . message . tool_calls . length > 0 , 'Expected at least one tool call' ); const toolCall = choice . message . tool_calls [ 0 ]; assert ( toolCall . function . name === 'hris_get_employee' , 'Expected tool call to be hris_get_employee' ); // Parse the arguments to verify they contain the expected fields const args = JSON . parse ( toolCall . function . arguments ); assert ( args . id === 'c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , 'Expected id to match the query' ); assert ( args . fields !== undefined , 'Expected fields to be defined' ); }; // Run the example openaiIntegration ();","title":"Openai Integration"}]}