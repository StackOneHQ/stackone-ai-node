{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StackOne AI SDK # /** * StackOne AI provides a unified interface for accessing various SaaS tools through AI-friendly APIs. * * # Installation * * ```bash * # Using npm * npm install stackone-ai-node * * # Using yarn * yarn add stackone-ai-node * * # Using bun * bun add stackone-ai-node * ``` * * # Authentication * * Set the `STACKONE_API_KEY` environment variable: * * ```bash * export STACKONE_API_KEY=<your-api-key> * ``` * * or load from a .env file: */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); Account IDs # StackOne uses account IDs to identify different integrations. See the example in the README for more details. This example will hardcode the account ID: const accountId = '45072196112816593343' ; Quickstart # import { StackOneToolSet } from '../src' ; const quickstart = async () : Promise < void > => { const toolset = new StackOneToolSet (); // Get all HRIS-related tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Use a specific tool const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { try { const employees = await employeeTool . execute (); console . log ( employees ); } catch ( error ) { console . error ( 'Error executing tool:' , error ); } } }; // Run the example quickstart (). catch ( console . error ); Next Steps # Check out some more examples: OpenAI Integration (openai-integration.ts) Error Handling (error-handling.ts) File Uploads (file-uploads.ts)","title":"Home"},{"location":"#stackone-ai-sdk","text":"/** * StackOne AI provides a unified interface for accessing various SaaS tools through AI-friendly APIs. * * # Installation * * ```bash * # Using npm * npm install stackone-ai-node * * # Using yarn * yarn add stackone-ai-node * * # Using bun * bun add stackone-ai-node * ``` * * # Authentication * * Set the `STACKONE_API_KEY` environment variable: * * ```bash * export STACKONE_API_KEY=<your-api-key> * ``` * * or load from a .env file: */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config ();","title":"StackOne AI SDK"},{"location":"#account-ids","text":"StackOne uses account IDs to identify different integrations. See the example in the README for more details. This example will hardcode the account ID: const accountId = '45072196112816593343' ;","title":"Account IDs"},{"location":"#quickstart","text":"import { StackOneToolSet } from '../src' ; const quickstart = async () : Promise < void > => { const toolset = new StackOneToolSet (); // Get all HRIS-related tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Use a specific tool const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { try { const employees = await employeeTool . execute (); console . log ( employees ); } catch ( error ) { console . error ( 'Error executing tool:' , error ); } } }; // Run the example quickstart (). catch ( console . error );","title":"Quickstart"},{"location":"#next-steps","text":"Check out some more examples: OpenAI Integration (openai-integration.ts) Error Handling (error-handling.ts) File Uploads (file-uploads.ts)","title":"Next Steps"},{"location":"ai-sdk-integration/","text":"Ai Sdk Integration # /** * This example shows how to use StackOne tools with the AI SDK. */ import assert from 'node:assert' ; import { openai } from '@ai-sdk/openai' ; import { generateText } from 'ai' ; import { StackOneToolSet } from '../src' ; const aiSdkIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get HRIS tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Convert to AI SDK tools const aiSdkTools = tools . toAISDKTools (); // Use max steps to automatically call the tool if it's needed const { text } = await generateText ({ model : openai ( 'gpt-4o-mini' ), tools : aiSdkTools , prompt : 'Get all details about employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , maxSteps : 3 , }); assert ( text . includes ( 'Isac Newton' ), 'Expected employee name to be included in the response' ); }; aiSdkIntegration (). catch ( console . error );","title":"Ai Sdk Integration"},{"location":"ai-sdk-integration/#ai-sdk-integration","text":"/** * This example shows how to use StackOne tools with the AI SDK. */ import assert from 'node:assert' ; import { openai } from '@ai-sdk/openai' ; import { generateText } from 'ai' ; import { StackOneToolSet } from '../src' ; const aiSdkIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get HRIS tools const tools = toolset . getTools ( 'hris_*' , accountId ); // Convert to AI SDK tools const aiSdkTools = tools . toAISDKTools (); // Use max steps to automatically call the tool if it's needed const { text } = await generateText ({ model : openai ( 'gpt-4o-mini' ), tools : aiSdkTools , prompt : 'Get all details about employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA' , maxSteps : 3 , }); assert ( text . includes ( 'Isac Newton' ), 'Expected employee name to be included in the response' ); }; aiSdkIntegration (). catch ( console . error );","title":"Ai Sdk Integration"},{"location":"custom-base-url/","text":"Custom Base Url # #!/usr/bin/env bun Example demonstrating how to use a custom base URL with StackOne tools. This is useful for: 1. Testing against development APIs 2. Working with self-hosted StackOne instances Usage: bun run examples/custom-base-url.ts import { StackOneToolSet } from '../src' ; const customBaseUrl = async () : Promise < void > => { Default base URL const defaultToolset = new StackOneToolSet (); const hrisTools = defaultToolset . getTools ( 'hris_*' ); console . log ( `Found ${ hrisTools . length } HRIS tools with default base URL` ); const defaultTool = hrisTools . getTool ( 'hris_get_employee' ); if ( defaultTool ) { console . log ( `Default tool URL: ${ defaultTool . _executeConfig . url } ` ); // Should start with https://api.stackone.com } Custom base URL const devToolset = new StackOneToolSet ( process . env . STACKONE_API_KEY , process . env . STACKONE_ACCOUNT_ID , 'https://api.example-dev.com' ); const devHrisTools = devToolset . getTools ( 'hris_*' ); console . log ( `Found ${ devHrisTools . length } HRIS tools with custom base URL` ); const devTool = devHrisTools . getTool ( 'hris_get_employee' ); if ( devTool ) { console . log ( `Custom tool URL: ${ devTool . _executeConfig . url } ` ); // Should start with https://api.example-dev.com } Note this uses the same tools but substitutes the base URL if ( defaultTool && devTool ) { console . assert ( defaultTool . name === devTool . name , 'Tool names should be the same' ); console . assert ( defaultTool . _executeConfig . url . includes ( 'https://api.stackone.com' ), 'Default tool should use the default base URL' ); console . assert ( devTool . _executeConfig . url . includes ( 'https://api.example-dev.com' ), 'Custom tool should use the custom base URL' ); } }; // Run the example customBaseUrl (). catch (( error ) => { console . error ( 'Error:' , error ); process . exit ( 1 ); });","title":"Custom Base Url"},{"location":"custom-base-url/#custom-base-url","text":"#!/usr/bin/env bun Example demonstrating how to use a custom base URL with StackOne tools. This is useful for: 1. Testing against development APIs 2. Working with self-hosted StackOne instances Usage: bun run examples/custom-base-url.ts import { StackOneToolSet } from '../src' ; const customBaseUrl = async () : Promise < void > => { Default base URL const defaultToolset = new StackOneToolSet (); const hrisTools = defaultToolset . getTools ( 'hris_*' ); console . log ( `Found ${ hrisTools . length } HRIS tools with default base URL` ); const defaultTool = hrisTools . getTool ( 'hris_get_employee' ); if ( defaultTool ) { console . log ( `Default tool URL: ${ defaultTool . _executeConfig . url } ` ); // Should start with https://api.stackone.com } Custom base URL const devToolset = new StackOneToolSet ( process . env . STACKONE_API_KEY , process . env . STACKONE_ACCOUNT_ID , 'https://api.example-dev.com' ); const devHrisTools = devToolset . getTools ( 'hris_*' ); console . log ( `Found ${ devHrisTools . length } HRIS tools with custom base URL` ); const devTool = devHrisTools . getTool ( 'hris_get_employee' ); if ( devTool ) { console . log ( `Custom tool URL: ${ devTool . _executeConfig . url } ` ); // Should start with https://api.example-dev.com } Note this uses the same tools but substitutes the base URL if ( defaultTool && devTool ) { console . assert ( defaultTool . name === devTool . name , 'Tool names should be the same' ); console . assert ( defaultTool . _executeConfig . url . includes ( 'https://api.stackone.com' ), 'Default tool should use the default base URL' ); console . assert ( devTool . _executeConfig . url . includes ( 'https://api.example-dev.com' ), 'Custom tool should use the custom base URL' ); } }; // Run the example customBaseUrl (). catch (( error ) => { console . error ( 'Error:' , error ); process . exit ( 1 ); });","title":"Custom Base Url"},{"location":"error-handling/","text":"Error Handling # /** * # Error Handling * * This example shows how to handle errors when using the StackOne SDK. */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); import { StackOneAPIError , StackOneError , StackOneToolSet , ToolsetConfigError } from '../src' ; const errorHandling = async () : Promise < void > => { try { // Example 1: Handle initialization errors console . log ( 'Example 1: Handle initialization errors' ); try { // Temporarily save the API key const originalKey = process . env . STACKONE_API_KEY ; // Delete the API key to force an error process . env . STACKONE_API_KEY = undefined ; // This will throw a ToolsetConfigError const _toolset = new StackOneToolSet (); // Restore the API key process . env . STACKONE_API_KEY = originalKey ; } catch ( error ) { if ( error instanceof ToolsetConfigError ) { console . log ( '\u2713 Caught ToolsetConfigError:' , error . message ); } else { console . error ( 'Unexpected error:' , error ); } } // Example 2: Handle API errors console . log ( '\\nExample 2: Handle API errors' ); const toolset = new StackOneToolSet (); const accountId = 'invalid-account-id' ; // Invalid account ID to force an error try { const tools = toolset . getTools ( 'hris_*' , accountId ); const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { // This will throw a StackOneAPIError due to the invalid account ID await employeeTool . execute (); } } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . log ( '\u2713 Caught StackOneAPIError:' ); console . log ( ` Status code: ${ error . statusCode } ` ); console . log ( ` Response body: ${ JSON . stringify ( error . responseBody ) } ` ); } else if ( error instanceof StackOneError ) { console . log ( '\u2713 Caught StackOneError:' , error . message ); } else { console . error ( 'Unexpected error:' , error ); } } // Example 3: Handle invalid tool name console . log ( '\\nExample 3: Handle invalid tool name' ); try { const tools = toolset . getTools ( 'hris_*' ); const nonExistentTool = tools . getTool ( 'non_existent_tool' ); if ( ! nonExistentTool ) { console . log ( '\u2713 Tool not found, as expected' ); } else { // This should not happen console . error ( 'Unexpected: Tool was found' ); } } catch ( error ) { console . error ( 'Unexpected error:' , error ); } // Example 4: Handle invalid arguments console . log ( '\\nExample 4: Handle invalid arguments' ); try { const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_get_employee' ); if ( employeeTool ) { // This will throw an error due to missing required arguments await employeeTool . execute (); } } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . log ( '\u2713 Caught StackOneAPIError:' ); console . log ( ` Status code: ${ error . statusCode } ` ); console . log ( ` Response body: ${ JSON . stringify ( error . responseBody ) } ` ); } else if ( error instanceof StackOneError ) { console . log ( '\u2713 Caught StackOneError:' , error . message ); } else { console . log ( '\u2713 Caught error:' , error instanceof Error ? error.message : String ( error )); } } } catch ( error ) { console . error ( 'Unhandled error:' , error ); } }; // Run the example errorHandling (). catch ( console . error );","title":"Error Handling"},{"location":"error-handling/#error-handling","text":"/** * # Error Handling * * This example shows how to handle errors when using the StackOne SDK. */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); import { StackOneAPIError , StackOneError , StackOneToolSet , ToolsetConfigError } from '../src' ; const errorHandling = async () : Promise < void > => { try { // Example 1: Handle initialization errors console . log ( 'Example 1: Handle initialization errors' ); try { // Temporarily save the API key const originalKey = process . env . STACKONE_API_KEY ; // Delete the API key to force an error process . env . STACKONE_API_KEY = undefined ; // This will throw a ToolsetConfigError const _toolset = new StackOneToolSet (); // Restore the API key process . env . STACKONE_API_KEY = originalKey ; } catch ( error ) { if ( error instanceof ToolsetConfigError ) { console . log ( '\u2713 Caught ToolsetConfigError:' , error . message ); } else { console . error ( 'Unexpected error:' , error ); } } // Example 2: Handle API errors console . log ( '\\nExample 2: Handle API errors' ); const toolset = new StackOneToolSet (); const accountId = 'invalid-account-id' ; // Invalid account ID to force an error try { const tools = toolset . getTools ( 'hris_*' , accountId ); const employeeTool = tools . getTool ( 'hris_list_employees' ); if ( employeeTool ) { // This will throw a StackOneAPIError due to the invalid account ID await employeeTool . execute (); } } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . log ( '\u2713 Caught StackOneAPIError:' ); console . log ( ` Status code: ${ error . statusCode } ` ); console . log ( ` Response body: ${ JSON . stringify ( error . responseBody ) } ` ); } else if ( error instanceof StackOneError ) { console . log ( '\u2713 Caught StackOneError:' , error . message ); } else { console . error ( 'Unexpected error:' , error ); } } // Example 3: Handle invalid tool name console . log ( '\\nExample 3: Handle invalid tool name' ); try { const tools = toolset . getTools ( 'hris_*' ); const nonExistentTool = tools . getTool ( 'non_existent_tool' ); if ( ! nonExistentTool ) { console . log ( '\u2713 Tool not found, as expected' ); } else { // This should not happen console . error ( 'Unexpected: Tool was found' ); } } catch ( error ) { console . error ( 'Unexpected error:' , error ); } // Example 4: Handle invalid arguments console . log ( '\\nExample 4: Handle invalid arguments' ); try { const tools = toolset . getTools ( 'hris_*' ); const employeeTool = tools . getTool ( 'hris_get_employee' ); if ( employeeTool ) { // This will throw an error due to missing required arguments await employeeTool . execute (); } } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . log ( '\u2713 Caught StackOneAPIError:' ); console . log ( ` Status code: ${ error . statusCode } ` ); console . log ( ` Response body: ${ JSON . stringify ( error . responseBody ) } ` ); } else if ( error instanceof StackOneError ) { console . log ( '\u2713 Caught StackOneError:' , error . message ); } else { console . log ( '\u2713 Caught error:' , error instanceof Error ? error.message : String ( error )); } } } catch ( error ) { console . error ( 'Unhandled error:' , error ); } }; // Run the example errorHandling (). catch ( console . error );","title":"Error Handling"},{"location":"file-uploads/","text":"File Uploads # /** * # File Uploads * * This example shows how to upload files using the StackOne SDK. */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); import * as fs from 'node:fs' ; import * as path from 'node:path' ; import { StackOneAPIError , StackOneToolSet } from '../src' ; const fileUploads = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get document tools const tools = toolset . getTools ( 'documents_*' , accountId ); // Find the upload document tool const uploadTool = tools . getTool ( 'documents_upload_document' ); if ( ! uploadTool ) { console . error ( 'Upload document tool not found' ); return ; } try { // Create a sample file to upload const sampleFilePath = path . join ( __dirname , 'sample.txt' ); fs . writeFileSync ( sampleFilePath , 'This is a sample file for testing file uploads.' ); console . log ( `Created sample file at: ${ sampleFilePath } ` ); // Read the file as a Buffer const fileContent = fs . readFileSync ( sampleFilePath ); // Upload the file console . log ( 'Uploading file...' ); const result = await uploadTool . execute ({ file : fileContent , filename : 'sample.txt' , folder_id : 'root' , // Assuming 'root' is a valid folder ID }); console . log ( 'Upload successful:' ); console . log ( JSON . stringify ( result , null , 2 )); // Clean up the sample file fs . unlinkSync ( sampleFilePath ); console . log ( 'Sample file deleted' ); } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . error ( `API Error ( ${ error . statusCode } ):` , error . responseBody ); } else { console . error ( 'Error:' , error instanceof Error ? error.message : String ( error )); } // Clean up the sample file if it exists const sampleFilePath = path . join ( __dirname , 'sample.txt' ); if ( fs . existsSync ( sampleFilePath )) { fs . unlinkSync ( sampleFilePath ); console . log ( 'Sample file deleted' ); } } }; // Run the example fileUploads (). catch ( console . error );","title":"File Uploads"},{"location":"file-uploads/#file-uploads","text":"/** * # File Uploads * * This example shows how to upload files using the StackOne SDK. */ // Load environment variables from .env file import * as dotenv from 'dotenv' ; dotenv . config (); import * as fs from 'node:fs' ; import * as path from 'node:path' ; import { StackOneAPIError , StackOneToolSet } from '../src' ; const fileUploads = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get document tools const tools = toolset . getTools ( 'documents_*' , accountId ); // Find the upload document tool const uploadTool = tools . getTool ( 'documents_upload_document' ); if ( ! uploadTool ) { console . error ( 'Upload document tool not found' ); return ; } try { // Create a sample file to upload const sampleFilePath = path . join ( __dirname , 'sample.txt' ); fs . writeFileSync ( sampleFilePath , 'This is a sample file for testing file uploads.' ); console . log ( `Created sample file at: ${ sampleFilePath } ` ); // Read the file as a Buffer const fileContent = fs . readFileSync ( sampleFilePath ); // Upload the file console . log ( 'Uploading file...' ); const result = await uploadTool . execute ({ file : fileContent , filename : 'sample.txt' , folder_id : 'root' , // Assuming 'root' is a valid folder ID }); console . log ( 'Upload successful:' ); console . log ( JSON . stringify ( result , null , 2 )); // Clean up the sample file fs . unlinkSync ( sampleFilePath ); console . log ( 'Sample file deleted' ); } catch ( error ) { if ( error instanceof StackOneAPIError ) { console . error ( `API Error ( ${ error . statusCode } ):` , error . responseBody ); } else { console . error ( 'Error:' , error instanceof Error ? error.message : String ( error )); } // Clean up the sample file if it exists const sampleFilePath = path . join ( __dirname , 'sample.txt' ); if ( fs . existsSync ( sampleFilePath )) { fs . unlinkSync ( sampleFilePath ); console . log ( 'Sample file deleted' ); } } }; // Run the example fileUploads (). catch ( console . error );","title":"File Uploads"},{"location":"openai-integration/","text":"Openai Integration # /** * This example shows how to use StackOne tools with OpenAI. */ import OpenAI from 'openai' ; import { StackOneToolSet } from '../src' ; const openaiIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get the correct tool const tools = toolset . getTools ( 'hris_get_employee' , accountId ); const openAITools = tools . toOpenAI (); // Initialize OpenAI client const openai = new OpenAI (); try { await openai . chat . completions . create ({ model : 'gpt-4o-mini' , messages : [ { role : 'system' , content : 'You are a helpful assistant that can access HRIS information.' , }, { role : 'user' , content : 'What is the employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA phone number?' , }, ], tools : openAITools , }); // { // \"index\": 0, // \"message\": { // \"role\": \"assistant\", // \"content\": null, // \"tool_calls\": [ // { // \"id\": \"call_1ffppzVwBWnTbBR1KKD38GA3\", // \"type\": \"function\", // \"function\": { // \"name\": \"hris_get_employee\", // \"arguments\": \"{\\\"id\\\":\\\"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\\\",\\\"fields\\\":\\\"phone_number\\\"}\" // } // } // ], // \"refusal\": null // }, // \"logprobs\": null, // \"finish_reason\": \"tool_calls\" // } } catch ( error ) { console . error ( 'Error:' , error ); } }; // Run the example openaiIntegration (). catch ( console . error );","title":"OpenAI"},{"location":"openai-integration/#openai-integration","text":"/** * This example shows how to use StackOne tools with OpenAI. */ import OpenAI from 'openai' ; import { StackOneToolSet } from '../src' ; const openaiIntegration = async () : Promise < void > => { // Initialize StackOne const toolset = new StackOneToolSet (); const accountId = '45072196112816593343' ; // Get the correct tool const tools = toolset . getTools ( 'hris_get_employee' , accountId ); const openAITools = tools . toOpenAI (); // Initialize OpenAI client const openai = new OpenAI (); try { await openai . chat . completions . create ({ model : 'gpt-4o-mini' , messages : [ { role : 'system' , content : 'You are a helpful assistant that can access HRIS information.' , }, { role : 'user' , content : 'What is the employee with id: c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA phone number?' , }, ], tools : openAITools , }); // { // \"index\": 0, // \"message\": { // \"role\": \"assistant\", // \"content\": null, // \"tool_calls\": [ // { // \"id\": \"call_1ffppzVwBWnTbBR1KKD38GA3\", // \"type\": \"function\", // \"function\": { // \"name\": \"hris_get_employee\", // \"arguments\": \"{\\\"id\\\":\\\"c28xIQaWQ6MzM5MzczMDA2NzMzMzkwNzIwNA\\\",\\\"fields\\\":\\\"phone_number\\\"}\" // } // } // ], // \"refusal\": null // }, // \"logprobs\": null, // \"finish_reason\": \"tool_calls\" // } } catch ( error ) { console . error ( 'Error:' , error ); } }; // Run the example openaiIntegration (). catch ( console . error );","title":"Openai Integration"}]}